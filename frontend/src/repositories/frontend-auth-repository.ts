/**
 * ๐ Frontend Auth Repository - ุฅุฏุงุฑุฉ ุงููุตุงุฏูุฉ ูุญููุงู  
 * ========================================================
 * 
 * Repository Pattern ูุชุฎุตุต ูููุตุงุฏูุฉ ูุน ุชูุงูู ูุงูู ูุน Backend
 * ูุฏุนู ุฌููุน ุทุฑู ุงููุตุงุฏูุฉ: ุงูุจุฑูุฏ ุงูุฅููุชุฑูููุ ุงููุงุชู ุงูุนุฑุงููุ ูุฌูุฌู
 * 
 * ๐ ุชุงุฑูุฎ ุงูุฅูุดุงุก: ููููู 2025
 * ๐จโ๐ป ุงููุทูุฑ: ุนูู ุฌูุฏุช  
 * ๐ฏ ุงููุฏู: ุฅุฏุงุฑุฉ ุดุงููุฉ ูููุตุงุฏูุฉ ูู Frontend
 * ๐ Backend Reference: AuthService.ts (1,430 ุณุทุฑ)
 * ๐ Types Reference: auth.ts (314 ุณุทุฑ)
 */

import { 
  AuthMethod,                    // ๐ ุทุฑู ุงููุตุงุฏูุฉ ุงููุชุงุญุฉ ูููุณุชุฎุฏู
  PhoneVerification,             // ๐ฑ ุจูุงูุงุช ุงูุชุญูู ูู ุงููุงุชู ุงูุนุฑุงูู - ุณููุณุชุฎุฏู ูู cache OTP
  EmailRegistrationData,         // ๐ง ุจูุงูุงุช ุงูุชุณุฌูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู
  PhoneRegistrationData,         // ๐ฑ ุจูุงูุงุช ุงูุชุณุฌูู ุจุงููุงุชู ุงูุนุฑุงูู
  GoogleRegistrationData,        // ๐ ุจูุงูุงุช ุงูุชุณุฌูู ุจุญุณุงุจ ุฌูุฌู
  EmailLoginData,                // ๐ง ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุจุงูุจุฑูุฏ
  PhoneLoginData,                // ๐ฑ ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุจุงููุงุชู
  GoogleLoginData,               // ๐ ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุจุฌูุฌู
  AuthResult,                    // ๐ฏ ูุชูุฌุฉ ุนูููุงุช ุงููุตุงุฏูุฉ
  OTPSendRequest,                // ๐ค ุทูุจ ุฅุฑุณุงู OTP
  OTPSendResult,                 // ๐ฅ ูุชูุฌุฉ ุฅุฑุณุงู OTP
  OTPVerifyRequest,              // ๐ ุทูุจ ุงูุชุญูู ูู OTP
  OTPVerifyResult,               // โ ูุชูุฌุฉ ุงูุชุญูู ูู OTP
  AuthSessionState,              // ๐ ุญุงูุฉ ุฌูุณุฉ ุงููุตุงุฏูุฉ
  RegistrationStats,             // ๐ ุฅุญุตุงุฆูุงุช ุงูุชุณุฌูู
  AuthMethodUsageStats,          // ๐ ุฅุญุตุงุฆูุงุช ุงุณุชุฎุฏุงู ุทุฑู ุงููุตุงุฏูุฉ
  AuthActivityLog,               // ๐ ุณุฌู ุฃูุดุทุฉ ุงููุตุงุฏูุฉ
  AuthSecuritySettings,          // ๐ ุฅุนุฏุงุฏุงุช ุงูุฃูุงู - ุณููุณุชุฎุฏู ูู ุฅุนุฏุงุฏุงุช ุงูุญุณุงุจ
  ID,                           // ๐ ููุน ุงููุนุฑู ุงููุฑูุฏ
  User,                         // ๐ค ููุน ุงููุณุชุฎุฏู
  FrontendQueryOptions,         // ๐ ุฎูุงุฑุงุช ุงูุงุณุชุนูุงู ูููุฑููุช ุฅูุฏ
  AuthProvider,                 // ๐ ุฃููุงุน ููุฏูู ุงููุตุงุฏูุฉ
  FirebaseTimestamp            // ๐ ููุน ุงูุชูููุช ูู Firebase
} from '@depth-studio/types';
import { FrontendBaseRepository } from './frontend-base-repository';
import { apiClient } from '../services/api/api-client';

// ======================================
// ๐ฏ ุดุฑุญ ุงุณุชุฎุฏุงู ูู Import ููุงุฆุฏุชู
// ======================================

/**
 * ๐ AuthMethod: ุทุฑู ุงููุตุงุฏูุฉ ุงููุชุงุญุฉ ูููุณุชุฎุฏู
 * - ูุญุชูู ุนูู: type (email/phone/google), verified, created_at, metadata
 * - ููุณุชุฎุฏู ูู: getUserAuthMethods() ูุฌูุจ ุทุฑู ุงููุตุงุฏูุฉ ุงููุชุงุญุฉ
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ฑ PhoneVerification: ุจูุงูุงุช ุงูุชุญูู ูู ุงููุงุชู ุงูุนุฑุงูู
 * - ูุญุชูู ุนูู: phone, country_code, otp_code, expires_at, attempts
 * - ููุณุชุฎุฏู ูู: ุฏูุงู OTP ููููุงุชู ุงูุนุฑุงููุฉ
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ง EmailRegistrationData: ุจูุงูุงุช ุงูุชุณุฌูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู
 * - ูุญุชูู ุนูู: email, password, confirm_password, full_name, phone?, accept_terms
 * - ููุณุชุฎุฏู ูู: registerWithEmail() ููุชุณุฌูู ุงูุฌุฏูุฏ
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ฑ PhoneRegistrationData: ุจูุงูุงุช ุงูุชุณุฌูู ุจุงููุงุชู ุงูุนุฑุงูู
 * - ูุญุชูู ุนูู: phone, country_code, full_name, accept_terms
 * - ููุณุชุฎุฏู ูู: registerWithPhone() ููุชุณุฌูู ุจุงููุงุชู
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ GoogleRegistrationData: ุจูุงูุงุช ุงูุชุณุฌูู ุจุญุณุงุจ ุฌูุฌู
 * - ูุญุชูู ุนูู: google_token, full_name, email, profile_picture?, accept_terms
 * - ููุณุชุฎุฏู ูู: registerWithGoogle() ููุชุณุฌูู ุจุฌูุฌู
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ฏ AuthResult: ูุชูุฌุฉ ุนูููุงุช ุงููุตุงุฏูุฉ
 * - ูุญุชูู ุนูู: success, user?, token?, needs_role_selection, message
 * - ููุณุชุฎุฏู ูู: ุฌููุน ุฏูุงู ุงูุชุณุฌูู ูุงูุฏุฎูู ูุฅุฑุฌุงุน ุงููุชุงุฆุฌ
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ค OTPSendRequest: ุทูุจ ุฅุฑุณุงู OTP
 * - ูุญุชูู ุนูู: phone, country_code, user_id?, purpose
 * - ููุณุชุฎุฏู ูู: sendOTP() ูุฅุฑุณุงู ุฑูุฒ ุงูุชุญูู
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ฅ OTPSendResult: ูุชูุฌุฉ ุฅุฑุณุงู OTP
 * - ูุญุชูู ุนูู: success, message, expires_at, attempts_remaining
 * - ููุณุชุฎุฏู ูู: sendOTP() ูุฅุฑุฌุงุน ูุชูุฌุฉ ุงูุฅุฑุณุงู
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ AuthSessionState: ุญุงูุฉ ุฌูุณุฉ ุงููุตุงุฏูุฉ
 * - ูุญุชูู ุนูู: user, isAuthenticated, isLoading, token, error
 * - ููุณุชุฎุฏู ูู: getSessionState() ูุชุชุจุน ุญุงูุฉ ุงูุฌูุณุฉ
 * - ูุตุฏุฑู: types/src/auth.ts
 * 
 * ๐ RegistrationStats: ุฅุญุตุงุฆูุงุช ุงูุชุณุฌูู
 * - ูุญุชูู ุนูู: email_registrations, phone_registrations, conversion_rates
 * - ููุณุชุฎุฏู ูู: getRegistrationStats() ููุฅุญุตุงุฆูุงุช ูุงูุชุญูููุงุช
 * - ูุตุฏุฑู: types/src/auth.ts
 */

/**
 * ูุงุฌูุฉ ุฎูุงุฑุงุช ุงูุงุณุชุนูุงู ุงูุฎุงุตุฉ ุจุงููุตุงุฏูุฉ
 * ุชูุณุน FrontendQueryOptions ุจุฎูุงุฑุงุช ุฎุงุตุฉ ุจุงููุตุงุฏูุฉ
 */
interface AuthQueryOptions extends FrontendQueryOptions {
  authMethod?: 'email' | 'phone' | 'google';     // ููุชุฑุฉ ุญุณุจ ุทุฑููุฉ ุงููุตุงุฏูุฉ
  verified?: boolean;                              // ููุชุฑุฉ ุญุณุจ ุงูุชุญูู
  dateRange?: {                                   // ููุชุฑุฉ ุญุณุจ ูุทุงู ุชุงุฑูุฎู
    start: Date;
    end: Date;
  };
  activityType?: string;                          // ููุน ุงููุดุงุท ุงููุทููุจ
}

/**
 * ูุงุฌูุฉ ุฅุญุตุงุฆูุงุช ุงูุฃูุงู ุงูุดุงููุฉ
 * ุชุญุชูู ุนูู ุฅุญุตุงุฆูุงุช ุดุงููุฉ ุนู ุฃูุงู ุงููุธุงู
 */
interface SecurityAnalytics {
  totalLoginAttempts: number;                     // ุฅุฌูุงูู ูุญุงููุงุช ุงูุฏุฎูู
  successfulLogins: number;                       // ุงูุฏุฎููุงุช ุงููุงุฌุญุฉ
  failedLogins: number;                           // ุงูุฏุฎููุงุช ุงููุงุดูุฉ
  blockedIPs: number;                             // ุนูุงููู IP ุงููุญุฌูุจุฉ
  otpSuccessRate: number;                         // ูุนุฏู ูุฌุงุญ OTP
  securityIncidents: number;                      // ุงูุญูุงุฏุซ ุงูุฃูููุฉ
  recentSuspiciousActivity: AuthActivityLog[];    // ุงููุดุงุท ุงููุดุจูู ุงูุฃุฎูุฑ
}

/**
 * ๐ Frontend Auth Repository
 * Repository ูุชุฎุตุต ูุฅุฏุงุฑุฉ ุงููุตุงุฏูุฉ ูุน ุฌููุน ุงูุนูููุงุช ุงููุทููุจุฉ
 * ูููุฑ ุชูุงููุงู ูุงููุงู ูุน Backend AuthService ูุน ุฅุถุงูุงุช Frontend
 */
export class FrontendAuthRepository extends FrontendBaseRepository<User> {
  
  constructor() {
    super('auth', '/api/auth');
  }

  // ======================================
  // ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ ููุชุณุฌูู
  // ======================================

  /**
   * ๐ง ุงูุชุณุฌูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู
   * ูุชูุงูู ูุน: AuthService.registerWithEmail()
   * 
   * @param data ุจูุงูุงุช ุงูุชุณุฌูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู
   * @returns ูุชูุฌุฉ ุงูุชุณุฌูู ูุน ุงููุณุชุฎุฏู ูุงูุชููู
   */
  async registerWithEmail(data: EmailRegistrationData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      // ูุง ูุญุชุงุฌ cache ููุชุณุฌูู - ุนูููุฉ ูุจุงุดุฑุฉ ุฏุงุฆูุงู
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/register/email`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุงูุชุณุฌูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุชุณุฌูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        activity_type: response.data.data.success ? 'registration_success' : 'registration_attempt',
        auth_method: 'email',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุชุณุฌูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ${error}`);
      
      // ุชุณุฌูู ุงููุญุงููุฉ ุงููุงุดูุฉ
      await this.logLocalAuthActivity({
        activity_type: 'registration_attempt',
        auth_method: 'email',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ฑ ุงูุชุณุฌูู ุจุงููุงุชู ุงูุนุฑุงูู
   * ูุชูุงูู ูุน: AuthService.registerWithPhone()
   */
  async registerWithPhone(data: PhoneRegistrationData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/register/phone`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุงูุชุณุฌูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุชุณุฌูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        activity_type: response.data.data.success ? 'registration_success' : 'registration_attempt',
        auth_method: 'phone',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุชุณุฌูู ุจุงููุงุชู: ${error}`);
      
      await this.logLocalAuthActivity({
        activity_type: 'registration_attempt',
        auth_method: 'phone',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุงูุชุณุฌูู ุจุญุณุงุจ ุฌูุฌู
   * ูุชูุงูู ูุน: AuthService.registerWithGoogle()
   */
  async registerWithGoogle(data: GoogleRegistrationData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/register/google`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุงูุชุณุฌูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุชุณุฌูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        activity_type: response.data.data.success ? 'registration_success' : 'registration_attempt',
        auth_method: 'google',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุชุณุฌูู ุจุญุณุงุจ ุฌูุฌู: ${error}`);
      
      await this.logLocalAuthActivity({
        activity_type: 'registration_attempt',
        auth_method: 'google',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  // ======================================
  // ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ ูุชุณุฌูู ุงูุฏุฎูู
  // ======================================

  /**
   * ๐ง ุชุณุฌูู ุงูุฏุฎูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู
   * ูุชูุงูู ูุน: AuthService.loginWithEmail()
   */
  async loginWithEmail(data: EmailLoginData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/login/email`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุชุณุฌูู ุงูุฏุฎูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุฏุฎูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
        
        // ุชุญุฏูุซ ุขุฎุฑ ุงุณุชุฎุฏุงู ูุทุฑููุฉ ุงููุตุงุฏูุฉ
        await this.updateAuthMethodLastUsed(response.data.data.user.id, 'email');
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: response.data.data.user?.id,
        activity_type: response.data.data.success ? 'login_success' : 'login_failed',
        auth_method: 'email',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุชุณุฌูู ุงูุฏุฎูู ุจุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ${error}`);
      
      await this.logLocalAuthActivity({
        activity_type: 'login_attempt',
        auth_method: 'email',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ฑ ุชุณุฌูู ุงูุฏุฎูู ุจุงููุงุชู ุงูุนุฑุงูู
   * ูุชูุงูู ูุน: AuthService.loginWithPhone()
   */
  async loginWithPhone(data: PhoneLoginData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/login/phone`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุชุณุฌูู ุงูุฏุฎูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุฏุฎูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
        
        // ุชุญุฏูุซ ุขุฎุฑ ุงุณุชุฎุฏุงู ูุทุฑููุฉ ุงููุตุงุฏูุฉ
        await this.updateAuthMethodLastUsed(response.data.data.user.id, 'phone');
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: response.data.data.user?.id,
        activity_type: response.data.data.success ? 'login_success' : 'login_failed',
        auth_method: 'phone',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุชุณุฌูู ุงูุฏุฎูู ุจุงููุงุชู: ${error}`);
      
      await this.logLocalAuthActivity({
        activity_type: 'login_attempt',
        auth_method: 'phone',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุชุณุฌูู ุงูุฏุฎูู ุจุญุณุงุจ ุฌูุฌู
   * ูุชูุงูู ูุน: AuthService.loginWithGoogle()
   */
  async loginWithGoogle(data: GoogleLoginData): Promise<AuthResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: AuthResult }>(`${this.apiEndpoint}/login/google`, data);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุชุณุฌูู ุงูุฏุฎูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุฏุฎูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
        
        // ุชุญุฏูุซ ุขุฎุฑ ุงุณุชุฎุฏุงู ูุทุฑููุฉ ุงููุตุงุฏูุฉ
        await this.updateAuthMethodLastUsed(response.data.data.user.id, 'google');
      }

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: response.data.data.user?.id,
        activity_type: response.data.data.success ? 'login_success' : 'login_failed',
        auth_method: 'google',
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุชุณุฌูู ุงูุฏุฎูู ุจุญุณุงุจ ุฌูุฌู: ${error}`);
      
      await this.logLocalAuthActivity({
        activity_type: 'login_attempt',
        auth_method: 'google',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  // ======================================
  // ุงูุนูููุงุช ุงููุชุฎุตุตุฉ ูู OTP ูุงููุงุชู ุงูุนุฑุงูู
  // ======================================

  /**
   * ๐ค ุฅุฑุณุงู ุฑูุฒ OTP ูููุงุชู ุงูุนุฑุงูู
   * ูุชูุงูู ูุน: AuthService.sendOTP()
   * 
   * ูุงุฆุฏุฉ OTPSendRequest:
   * - ูุญุชูู ุนูู: phone, country_code (+964), user_id?, purpose
   * - ููุณุชุฎุฏู ูุฅุฑุณุงู ุฑูุฒ ุงูุชุญูู ููุฃุฑูุงู ุงูุนุฑุงููุฉ
   * - ูุฏุนู ุฌููุน ุงูุฃุบุฑุงุถ: registration, login, phone_verification, password_reset
   */
  async sendOTP(request: OTPSendRequest): Promise<OTPSendResult> {
    try {
      this.setLoading(true);
      
      // ุงูุชุญูู ูู ููู ุงูุฑูู ุนุฑุงูู
      if (request.country_code !== '+964') {
        throw new Error('ูุฏุนู ุงููุธุงู ุงูุฃุฑูุงู ุงูุนุฑุงููุฉ ููุท (+964)');
      }

      const response = await apiClient.post<{ data: OTPSendResult }>(`${this.apiEndpoint}/send-otp`, request);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุฅุฑุณุงู OTP ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ูุนูููุงุช OTP ูู cache ูุญููุงู ููุชุงุจุนุฉ ุงูุญุงูุฉ
      const otpCacheKey = `otp_${request.phone}_${request.purpose}`;
      this.cache.set(otpCacheKey, {
        data: [response.data.data as unknown as User],
        timestamp: new Date(),
        expiry: 300, // 5 ุฏูุงุฆู
        key: otpCacheKey
      });

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: 'otp_sent',
        auth_method: 'phone',
        success: response.data.data.success,
        additional_data: {
          purpose: request.purpose,
          phone: request.phone
        }
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุฅุฑุณุงู ุฑูุฒ ุงูุชุญูู: ${error}`);
      
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: 'otp_sent',
        auth_method: 'phone',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุงูุชุญูู ูู ุฑูุฒ OTP
   * ูุชูุงูู ูุน: AuthService.verifyOTP()
   * 
   * ูุงุฆุฏุฉ OTPVerifyResult:
   * - ูุญุชูู ุนูู: success, message, user?, token?, needs_role_selection
   * - ููุณุชุฎุฏู ููุชุญูู ูู ุฑูุฒ OTP ูุฅููุงู ุนูููุฉ ุงููุตุงุฏูุฉ
   * - ูููู ุฃู ูุฑุฌุน ุงููุณุชุฎุฏู ูุงูุชููู ุฅุฐุง ูุฌุญ ุงูุชุญูู
   */
  async verifyOTP(request: OTPVerifyRequest): Promise<OTPVerifyResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: OTPVerifyResult }>(`${this.apiEndpoint}/verify-otp`, request);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุงูุชุญูู ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงููุณุชุฎุฏู ูู cache ุฅุฐุง ูุฌุญ ุงูุชุญูู
      if (response.data.data.success && response.data.data.user) {
        this.cacheItem(response.data.data.user);
      }

      // ุญุฐู cache OTP ุจุนุฏ ุงููุฌุงุญ ุฃู ุงููุดู ุงูููุงุฆู
      const otpCacheKey = `otp_${request.phone}`;
      Array.from(this.cache.keys()).forEach(key => {
        if (key.startsWith(otpCacheKey)) {
          this.cache.delete(key);
        }
      });

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: response.data.data.success ? 'otp_verified' : 'otp_failed',
        auth_method: 'phone',
        success: response.data.data.success,
        additional_data: {
          phone: request.phone
        }
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุชุญูู ูู ุฑูุฒ OTP: ${error}`);
      
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: 'otp_failed',
        auth_method: 'phone',
        success: false,
        failure_reason: String(error)
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุฅุนุงุฏุฉ ุฅุฑุณุงู ุฑูุฒ OTP
   * ูุชูุงูู ูุน: AuthService.resendOTP()
   */
  async resendOTP(request: OTPSendRequest): Promise<OTPSendResult> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: OTPSendResult }>(`${this.apiEndpoint}/resend-otp`, request);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุฅุนุงุฏุฉ ุงูุฅุฑุณุงู ูู ุงูุฎุงุฏู');
      }

      // ุชุญุฏูุซ cache OTP
      const otpCacheKey = `otp_${request.phone}_${request.purpose}`;
      this.cache.set(otpCacheKey, {
        data: [response.data.data as unknown as User],
        timestamp: new Date(),
        expiry: 300, // 5 ุฏูุงุฆู
        key: otpCacheKey
      });

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: 'otp_sent',
        auth_method: 'phone',
        success: response.data.data.success,
        additional_data: {
          purpose: request.purpose,
          phone: request.phone,
          is_resend: true
        }
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุฅุนุงุฏุฉ ุฅุฑุณุงู ุฑูุฒ ุงูุชุญูู: ${error}`);
      
      await this.logLocalAuthActivity({
        user_id: request.user_id,
        activity_type: 'otp_sent',
        auth_method: 'phone',
        success: false,
        failure_reason: String(error),
        additional_data: { is_resend: true }
      });
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  // ======================================
  // ุงูุนูููุงุช ุงููุชูุฏูุฉ ูุงูุฅุฏุงุฑูุฉ
  // ======================================

  /**
   * ๐ ุงูุญุตูู ุนูู ุทุฑู ุงููุตุงุฏูุฉ ูููุณุชุฎุฏู
   * ูุชูุงูู ูุน: AuthService.getUserAuthMethods()
   * 
   * ูุงุฆุฏุฉ AuthMethod[]:
   * - ูุญุชูู ุนูู ูุงุฆูุฉ ุจุฌููุน ุทุฑู ุงููุตุงุฏูุฉ ุงููุชุงุญุฉ ูููุณุชุฎุฏู
   * - ูู AuthMethod ูุญุชูู ุนูู: type, verified, created_at, metadata
   * - ููุณุชุฎุฏู ูุนุฑุถ ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูุฅุฏุงุฑุฉ ุทุฑู ุงููุตุงุฏูุฉ
   */
  async getUserAuthMethods(userId: ID): Promise<AuthMethod[]> {
    try {
      this.setLoading(true);
      
      // ูุญุต cache ุทุฑู ุงููุตุงุฏูุฉ
      const authMethodsCache = this.cache.get(`auth_methods_${userId}`);
      if (authMethodsCache && !this.isCacheExpired(authMethodsCache)) {
        this.setSuccess(true);
        return authMethodsCache.data as unknown as AuthMethod[];
      }

      const response = await apiClient.get<{ data: AuthMethod[] }>(`${this.apiEndpoint}/methods/${userId}`);
      
      if (!response.data?.data) {
        return [];
      }

      // ุญูุธ ุทุฑู ุงููุตุงุฏูุฉ ูู cache ูููุตู
      this.cache.set(`auth_methods_${userId}`, {
        data: response.data.data as unknown as User[],
        timestamp: new Date(),
        expiry: 300, // 5 ุฏูุงุฆู
        key: `auth_methods_${userId}`
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุทุฑู ุงููุตุงุฏูุฉ: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * โ ุงูุชุญูู ูู ุตุญุฉ ุฑูู ุงููุงุชู ุงูุนุฑุงูู
   * ูุชูุงูู ูุน: AuthService.validateIraqiPhone()
   */
  async validateIraqiPhone(phone: string, countryCode: string = '+964'): Promise<{ isValid: boolean; message: string }> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: { isValid: boolean; message: string } }>(`${this.apiEndpoint}/validate-phone`, {
        phone,
        country_code: countryCode
      });
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุงูุชุญูู ูู ุงูุฎุงุฏู');
      }

      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุชุญูู ูู ุฑูู ุงููุงุชู: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุชุณุฌูู ุงูุฎุฑูุฌ
   * ูุชูุงูู ูุน: AuthService.logout()
   */
  async logout(userId?: ID): Promise<{ success: boolean; message: string }> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.post<{ data: { success: boolean; message: string } }>(`${this.apiEndpoint}/logout`, {
        user_id: userId
      });
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ูุชูุฌุฉ ุชุณุฌูู ุงูุฎุฑูุฌ ูู ุงูุฎุงุฏู');
      }

      // ูุณุญ cache ุงููุญูู ุนูุฏ ุงูุฎุฑูุฌ
      if (userId) {
        this.removeCachedItem(userId);
        this.cache.delete(`auth_methods_${userId}`);
      }
      
      // ูุณุญ ุฌููุน cache ุงููุฑุชุจุท ุจุงููุตุงุฏูุฉ
      await this.clearAuthCache();

      // ุชุณุฌูู ุงููุดุงุท ูุญููุงู
      await this.logLocalAuthActivity({
        user_id: userId,
        activity_type: 'logout',
        auth_method: 'email', // ุงุณุชุฎุฏุงู ููุน ุตุญูุญ ูู AuthProvider
        success: response.data.data.success
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุชุณุฌูู ุงูุฎุฑูุฌ: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  // ======================================
  // ุงูุนูููุงุช ุงูุฅุญุตุงุฆูุฉ ูุงูุชุญููููุฉ
  // ======================================

  /**
   * ๐ ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุชุณุฌูู
   * ูุชูุงูู ูุน: AuthService.getRegistrationStats()
   * 
   * ูุงุฆุฏุฉ RegistrationStats:
   * - ูุญุชูู ุนูู: email_registrations, phone_registrations, conversion_rates
   * - ููุณุชุฎุฏู ูู ููุญุฉ ุชุญูู ุงูุฃุฏูู ููุชุงุจุนุฉ ููู ุงููุณุชุฎุฏููู
   * - ููุฏู insights ุนู ูุนุงููุฉ ุทุฑู ุงูุชุณุฌูู ุงููุฎุชููุฉ
   */
  async getRegistrationStats(): Promise<RegistrationStats> {
    try {
      this.setLoading(true);
      
      // ูุญุต cache ุงูุฅุญุตุงุฆูุงุช
      const statsCache = this.cache.get('registration_stats');
      if (statsCache && !this.isCacheExpired(statsCache)) {
        this.setSuccess(true);
        return statsCache.data as unknown as RegistrationStats;
      }

      const response = await apiClient.get<{ data: RegistrationStats }>(`${this.apiEndpoint}/stats/registration`);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงูุฅุญุตุงุฆูุงุช ูู cache (ูุฏุฉ ุฃุทูู)
      this.cache.set('registration_stats', {
        data: response.data.data as unknown as User[],
        timestamp: new Date(),
        expiry: 1800, // 30 ุฏูููุฉ
        key: 'registration_stats'
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุชุณุฌูู: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงุณุชุฎุฏุงู ุทุฑู ุงููุตุงุฏูุฉ
   * ูุชูุงูู ูุน: AuthService.getAuthMethodUsageStats()
   */
  async getAuthMethodUsageStats(): Promise<AuthMethodUsageStats> {
    try {
      this.setLoading(true);
      
      // ูุญุต cache ุงูุฅุญุตุงุฆูุงุช
      const statsCache = this.cache.get('auth_method_stats');
      if (statsCache && !this.isCacheExpired(statsCache)) {
        this.setSuccess(true);
        return statsCache.data as unknown as AuthMethodUsageStats;
      }

      const response = await apiClient.get<{ data: AuthMethodUsageStats }>(`${this.apiEndpoint}/stats/methods`);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช ูู ุงูุฎุงุฏู');
      }

      // ุญูุธ ุงูุฅุญุตุงุฆูุงุช ูู cache
      this.cache.set('auth_method_stats', {
        data: response.data.data as unknown as User[],
        timestamp: new Date(),
        expiry: 1800, // 30 ุฏูููุฉ
        key: 'auth_method_stats'
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุทุฑู ุงููุตุงุฏูุฉ: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุงูุญุตูู ุนูู ุณุฌู ุฃูุดุทุฉ ุงููุตุงุฏูุฉ
   * ูุชูุงูู ูุน: AuthService auth activity logs
   */
  async getAuthActivityLog(userId?: ID, options: AuthQueryOptions = {}): Promise<AuthActivityLog[]> {
    try {
      this.setLoading(true);
      
      const cacheKey = this.generateCacheKey('authActivityLog', { userId, ...options });
      
      // ูุญุต cache ุงูุณุฌู
      if (options.useCache !== false) {
        const logCache = this.cache.get(cacheKey);
        if (logCache && !this.isCacheExpired(logCache)) {
          this.setSuccess(true);
          return logCache.data as unknown as AuthActivityLog[];
        }
      }

      const queryParams = new URLSearchParams();
      if (userId) queryParams.append('user_id', userId);
      if (options.authMethod) queryParams.append('auth_method', options.authMethod);
      if (options.activityType) queryParams.append('activity_type', options.activityType);

      const response = await apiClient.get<{ data: AuthActivityLog[] }>(`${this.apiEndpoint}/activity-log?${queryParams}`);
      
      if (!response.data?.data) {
        return [];
      }

      // ุญูุธ ุงูุณุฌู ูู cache (ูุฏุฉ ูุตูุฑุฉ ููุจูุงูุงุช ุงูุญูุฉ)
      this.cache.set(cacheKey, {
        data: response.data.data as unknown as User[],
        timestamp: new Date(),
        expiry: 180, // 3 ุฏูุงุฆู
        key: cacheKey
      });
      
      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุณุฌู ุงูุฃูุดุทุฉ: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุงูุญุตูู ุนูู ุชุญูููุงุช ุงูุฃูุงู
   */
  async getSecurityAnalytics(): Promise<SecurityAnalytics> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.get<{ data: SecurityAnalytics }>(`${this.apiEndpoint}/security/analytics`);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ุชุญูููุงุช ุงูุฃูุงู ูู ุงูุฎุงุฏู');
      }

      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุชุญูููุงุช ุงูุฃูุงู: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  // ======================================
  // ุงูุนูููุงุช ุงููุชุฎุตุตุฉ ูุฅุนุฏุงุฏุงุช ุงูุฃูุงู
  // ======================================

  /**
   * ๐ ุงูุญุตูู ุนูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ุงูุญุงููุฉ
   * ูุณุชุฎุฏู AuthSecuritySettings ูุฅุฏุงุฑุฉ ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูู ุงูุชุทุจูู
   */
  async getSecuritySettings(): Promise<AuthSecuritySettings> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.get<{ data: AuthSecuritySettings }>(`${this.apiEndpoint}/security/settings`);
      
      if (!response.data?.data) {
        throw new Error('ูู ูุชู ุงูุญุตูู ุนูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูู ุงูุฎุงุฏู');
      }

      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ฑ ุชุชุจุน ุญุงูุฉ ุงูุชุญูู ูู ุงููุงุชู
   * ูุณุชุฎุฏู PhoneVerification ูุฅุฏุงุฑุฉ ุนูููุฉ OTP ุจุงูุชูุตูู
   */
  async getPhoneVerificationStatus(phone: string): Promise<PhoneVerification | null> {
    try {
      this.setLoading(true);
      
      const response = await apiClient.get<{ data: PhoneVerification }>(`${this.apiEndpoint}/phone-verification/${phone}`);
      
      if (!response.data?.data) {
        return null;
      }

      this.setSuccess(true);
      return response.data.data;
      
    } catch (error) {
      this.setError(`ูุดู ูู ุงูุญุตูู ุนูู ุญุงูุฉ ุงูุชุญูู ูู ุงููุงุชู: ${error}`);
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * ๐ ุชุญุฏูุฏ ููุน ููุฏู ุงููุตุงุฏูุฉ ุงููุณุชุฎุฏู
   * ูุณุชุฎุฏู AuthProvider ููููุชุฑุฉ ูุงูุฅุญุตุงุฆูุงุช
   */
  getAuthProviderFromMethod(authMethod: AuthMethod): AuthProvider {
    return authMethod.type as AuthProvider;
  }

  // ======================================
  // ุงูุฃุฏูุงุช ุงููุณุงุนุฏุฉ ุงูุฎุงุตุฉ ุจุงููุตุงุฏูุฉ
  // ======================================

  /**
   * ุชุญุฏูุซ ุขุฎุฑ ุงุณุชุฎุฏุงู ูุทุฑููุฉ ุงููุตุงุฏูุฉ
   */
  private async updateAuthMethodLastUsed(userId: ID, authType: 'email' | 'phone' | 'google'): Promise<void> {
    try {
      await apiClient.patch(`${this.apiEndpoint}/methods/${userId}/last-used`, {
        auth_type: authType
      });
      
      // ุฅูุบุงุก cache ุทุฑู ุงููุตุงุฏูุฉ ูุฅุนุงุฏุฉ ุชุญููููุง
      this.cache.delete(`auth_methods_${userId}`);
      
    } catch (error) {
      // ุฎุทุฃ ุบูุฑ ุญุฑุฌ - ูุง ูุฑูู exception
      console.warn('ูุดู ูู ุชุญุฏูุซ ุขุฎุฑ ุงุณุชุฎุฏุงู ูุทุฑููุฉ ุงููุตุงุฏูุฉ:', error);
    }
  }

  /**
   * ุชุณุฌูู ูุดุงุท ุงููุตุงุฏูุฉ ูุญููุงู
   */
  private async logLocalAuthActivity(activity: Partial<AuthActivityLog>): Promise<void> {
    try {
      // ุญูุธ ุงููุดุงุท ูู localStorage ูุคูุชุงู
      const localActivities = localStorage.getItem('auth_activities');
      const activities: Partial<AuthActivityLog>[] = localActivities ? JSON.parse(localActivities) : [];
      
      activities.push({
        ...activity,
        id: Date.now().toString(), // ID ูุคูุช
        created_at: new Date() as unknown as FirebaseTimestamp,
        ip_address: 'unknown', // ุณูุชู ุชุญุฏูุซู ูู ุงูุฎุงุฏู
        user_agent: navigator.userAgent
      });
      
      // ุญูุธ ุขุฎุฑ 100 ูุดุงุท ููุท
      if (activities.length > 100) {
        activities.splice(0, activities.length - 100);
      }
      
      localStorage.setItem('auth_activities', JSON.stringify(activities));
      
    } catch (error) {
      // ุฎุทุฃ ุบูุฑ ุญุฑุฌ - ูุง ูุฑูู exception
      console.warn('ูุดู ูู ุชุณุฌูู ุงููุดุงุท ูุญููุงู:', error);
    }
  }

  /**
   * ุฅูุบุงุก cache ุฎุงุต ุจุงููุตุงุฏูุฉ
   */
  async clearAuthCache(): Promise<void> {
    // ุฅูุบุงุก cache ุงูุฃุณุงุณู
    await this.clearCache();
    
    // ุฅูุบุงุก cache ุงููุชุฎุตุต ุจุงููุตุงุฏูุฉ
    Array.from(this.cache.keys()).forEach(key => {
      if (key.includes('auth_methods_') || 
          key.includes('otp_') || 
          key.includes('registration_stats') ||
          key.includes('auth_method_stats') ||
          key.includes('authActivityLog')) {
        this.cache.delete(key);
      }
    });
    
    // ูุณุญ localStorage ุงููุคูุช
    localStorage.removeItem('auth_activities');
  }

  /**
   * ุชุญุฏูุซ cache ุงููุตุงุฏูุฉ
   */
  async refreshAuthCache(): Promise<void> {
    await this.clearAuthCache();
    await this.refreshCache();
  }

  /**
   * ุงูุญุตูู ุนูู ุญุงูุฉ ุฌูุณุฉ ุงููุตุงุฏูุฉ ุงููุญููุฉ
   */
  getLocalSessionState(): Partial<AuthSessionState> {
    const token = localStorage.getItem('auth_token');
    const userStr = localStorage.getItem('auth_user');
    const user = userStr ? JSON.parse(userStr) : null;
    const operationState = this.getOperationState();
    
    return {
      user,
      isAuthenticated: !!token && !!user,
      isLoading: operationState.loading,
      token,
      error: operationState.error,
      needs_role_selection: user?.role === 'new_user' || user?.role_selected === false
    };
  }
}

// ======================================
// ุชุตุฏูุฑ Instance ุงูุชุฑุงุถู ููุงุณุชุฎุฏุงู ุงููุจุงุดุฑ
// ======================================

/**
 * ูุซูู ุงูุชุฑุงุถู ูู FrontendAuthRepository ููุงุณุชุฎุฏุงู ูู ุงูุชุทุจูู
 */
export const authRepository = new FrontendAuthRepository();

/**
 * ุชุตุฏูุฑ ุงูุฃููุงุน ููุงุณุชุฎุฏุงู ูู ุฃูุงูู ุฃุฎุฑู
 */
export type { AuthQueryOptions, SecurityAnalytics }; 