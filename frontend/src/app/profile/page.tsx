/**
 * ๐ค ุตูุญุฉ ุงูููู ุงูุดุฎุตู ุงูุฑุฆูุณูุฉ - Depth Studio
 * ===================================================
 * 
 * ๐ ุชุงุฑูุฎ ุงูุฅูุดุงุก: ุฏูุณูุจุฑ 2024
 * ๐จโ๐ป ุงููุทูุฑ: ุนูู ุฌูุฏุช
 * ๐ฏ ุงููุฏู: ุตูุญุฉ ููู ุดุฎุตู ุดุงููุฉ ูุน ุชุญุฑูุฑ ูุนุฑุถ ุงูุจูุงูุงุช
 * 
 * ๐ ุงููููุฒุงุช:
 * - ุนุฑุถ ูุชุญุฑูุฑ ุฌููุน ุจูุงูุงุช ุงููุณุชุฎุฏู
 * - ุฑูุน ูุชุบููุฑ ุตูุฑุฉ ุงูููู ุงูุดุฎุตู
 * - ุฅุฏุงุฑุฉ ุงูุฅุนุฏุงุฏุงุช ุงูุดุฎุตูุฉ
 * - ุชูุงูู ูุงูู ูุน profile.service.ts
 * - ุชุตููู responsive ูุน Material UI
 */

'use client';

import { useState, useEffect } from 'react';
import { 
  Box, 
  Container, 
  Paper, 
  Typography, 
  Avatar, 
  Button, 
  Card, 
  CardContent,
  Chip,
  Alert,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Tabs,
  Tab,
  SelectChangeEvent
} from '@mui/material';
// ๐จ Material UI Components: ูุฌููุนุฉ ุดุงููุฉ ูู ููููุงุช ูุงุฌูุฉ ุงููุณุชุฎุฏู
// ๐ ุงููุงุฆุฏุฉ ุงูุนูููุฉ:
//    - Box: ููุชุฎุทูุท ูุงููุญุงุฐุงุฉ ูุน sx props ููู ููุชุตููู (ูุญู ูุญู Grid)
//    - Container: ูุชุญุฏูุฏ ุนุฑุถ ุงููุญุชูู ูุชูุณูุทู ูุน breakpoints responsive
//    - Paper: ููุจุทุงูุงุช ูุงูุฃุณุทุญ ูุน elevation shadows
//    - Typography: ูุฌููุน ุงููุตูุต ูุน variants ูุญุฏุฏุฉ ูุณุจูุงู
//    - Avatar: ูุตูุฑ ุงูููู ุงูุดุฎุตู ูุน fallback ููุฃุญุฑู ุงูุฃููู
//    - Button: ููุฃุฒุฑุงุฑ ูุน variants (contained, outlined, text)
//    - Card/CardContent: ููุจุทุงูุงุช ุงูููุธูุฉ ูุน ูุญุชูู ููุณู
//    - Chip: ูุนุฑุถ tags ูุงูุญุงูุงุช ูุน ุฃููุงู ุฏููุงููููุฉ
//    - Alert: ูุฑุณุงุฆู ุงูุชูุจูู ูุงูุฃุฎุทุงุก ูุน severity types
//    - CircularProgress: ููุคุดุฑุงุช ุงูุชุญููู ูุน ุฃุญุฌุงู ูุฎุชููุฉ
//    - Dialog/DialogTitle/DialogContent/DialogActions: ููููุงูุฐ ุงูููุจุซูุฉ ุงูููุธูุฉ
//    - TextField: ูุญููู ุงูุฅุฏุฎุงู ูุน validation ูlabels
//    - FormControl/InputLabel/Select/MenuItem: ููููุงุฆู ุงูููุณุฏูุฉ
//    - Switch/FormControlLabel: ููููุงุชูุญ ูุงูุฎูุงุฑุงุช
//    - Tabs/Tab: ููุชููู ุจูู ุงููุญุชูู ุงูููุณู
//    - SelectChangeEvent: ููุชุนุงูู ูุน ุฃุญุฏุงุซ ุชุบููุฑ ุงูููุงุฆู ุงูููุณุฏูุฉ ุจู Type Safety
// ๐ ุงูุชูุงูู: ูุชูุงูู ูุน Next.js 14 ูReact 18
// โก ุงูุฃุฏุงุก: tree-shaking ุชููุงุฆู ูุชุญููู ุงูููููุงุช ุงููุณุชุฎุฏูุฉ ููุท

import {
  Edit as EditIcon,
  PhotoCamera as PhotoCameraIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Settings as SettingsIcon,
  Person as PersonIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  LocationOn as LocationIcon,
  Verified as VerifiedIcon,
  Language as LanguageIcon,
  Notifications as NotificationsIcon
} from '@mui/icons-material';
// ๐ฏ Material Design Icons: ูุฌููุนุฉ ุฃููููุงุช ูุชูุงููุฉ ููุชุณูุฉ
// ๐ ุงููุงุฆุฏุฉ ุงูุนูููุฉ:
//    - EditIcon: ุฃููููุฉ ุงูุชุญุฑูุฑ ูButton ุชุญุฑูุฑ ุงูููู ุงูุดุฎุตู
//    - PhotoCameraIcon: ุฃููููุฉ ุงููุงููุฑุง ูDialog ุชุบููุฑ ุงูุตูุฑุฉ
//    - SaveIcon: ุฃููููุฉ ุงูุญูุธ ูButton ุญูุธ ุงูุชุนุฏููุงุช
//    - CancelIcon: ุฃููููุฉ ุงูุฅูุบุงุก ูButton ุฅูุบุงุก ุงูุชุญุฑูุฑ
//    - SettingsIcon: ุฃููููุฉ ุงูุฅุนุฏุงุฏุงุช ูTab ุงูุฅุนุฏุงุฏุงุช
//    - PersonIcon: ุฃููููุฉ ุงูุดุฎุต ูTab ุงููุนูููุงุช ุงูุดุฎุตูุฉ
//    - PhoneIcon: ุฃููููุฉ ุงููุงุชู ูุญูู ุฑูู ุงููุงุชู
//    - EmailIcon: ุฃููููุฉ ุงูุจุฑูุฏ ููุจุฑูุฏ ุงูุฅููุชุฑููู
//    - LocationIcon: ุฃููููุฉ ุงููููุน ูุญูู ุงููููุน
//    - VerifiedIcon: ุฃููููุฉ ุงูุชุญูู ูููุณุชุฎุฏููู ุงูููุญูููู
//    - LanguageIcon: ุฃููููุฉ ุงููุบุฉ ูุฅุนุฏุงุฏุงุช ุงููุบุฉ
//    - NotificationsIcon: ุฃููููุฉ ุงูุฅุดุนุงุฑุงุช ูุฅุนุฏุงุฏุงุช ุงูุฅุดุนุงุฑุงุช
// ๐จ ุงูุชุตููู: ุชุชุจุน Material Design guidelines ูุน ุฃุญุฌุงู ูุชุณูุฉ
// ๐ ุงูุชูุงูู: ูุชูุงูู ูุน Material UI themes ูcolor system

// ======================================
// ๐ฆ ุงูุงุณุชูุฑุงุฏุงุช ูู ุงููุธุงู
// ======================================

import { useAuth } from '@/store/auth.store';
// ๐ง useAuth: ููุญุตูู ุนูู ุจูุงูุงุช ุงููุณุชุฎุฏู ุงูุญุงูู ูู auth store
// ๐ ุงููุงุฆุฏุฉ: ุงููุตูู ุงููุจุงุดุฑ ูู user object ูุน reactive updates
// ๐ ุงูุชูุงูู: ูุชุฒุงูู ูุน ูุธุงู ุงููุตุงุฏูุฉ ูุงูุชุญุฏูุซุงุช

import { 
  profileService,
  updateProfile,
  updateProfilePhoto,
  updatePreferences,
  validateProfileData,
  formatIraqiPhone,
  extractInitials,
  validateImageFile,
  type CompleteProfileUpdate,
  type PreferencesUpdateData,
  type ProfileUpdateResponse
} from '@/services/profile.service';
// ๐ฏ Profile Service: ุงูุฎุฏูุฉ ุงูุดุงููุฉ ุงูุชู ุทูุฑูุงูุง (624 ุณุทุฑ)
// ๐ ุงููุงุฆุฏุฉ ุงูุนูููุฉ:
//    - profileService: ุงูููุงุณ ุงูุฑุฆูุณู ูุฌููุน ุนูููุงุช ุงูููู ุงูุดุฎุตู
//    - updateProfile: ุฏุงูุฉ ุชุญุฏูุซ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ูุน auth store sync
//    - updateProfilePhoto: ุฏุงูุฉ ุฑูุน ูุชุญุฏูุซ ุตูุฑุฉ ุงูููู ุงูุดุฎุตู
//    - updatePreferences: ุฏุงูุฉ ุชุญุฏูุซ ุงูุฅุนุฏุงุฏุงุช ุงูุดุฎุตูุฉ (ุงููุบุฉุ ุงูุฅุดุนุงุฑุงุชุ ุงููุธูุฑ)
//    - validateProfileData: ุฏุงูุฉ ุดุงููุฉ ููุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ูุจู ุงูุฅุฑุณุงู
//    - formatIraqiPhone: ุฏุงูุฉ ุชูุณูู ุงูุฃุฑูุงู ุงูุนุฑุงููุฉ (07XXXXXXXX)
//    - extractInitials: ุฏุงูุฉ ุงุณุชุฎุฑุงุฌ ุงูุฃุญุฑู ุงูุฃููู ููุฃุณูุงุก ููAvatar
//    - validateImageFile: ุฏุงูุฉ ุงูุชุญูู ูู ุตุญุฉ ุงูุตูุฑ (ููุนุ ุญุฌูุ ุฃุจุนุงุฏ)
// ๐ ุงูุชูุงูู ุงููุงูู:
//    - Backend: AuthController.updateProfile endpoint (line 849)
//    - Auth Store: ุชุญุฏูุซ ุชููุงุฆู ููuser state ุนุจุฑ setUser
//    - Types: ุงุณุชุฎุฏุงู User interface ูValidationResult
//    - API Client: authentication headers ุชููุงุฆูุฉ

import { User, ValidationResult } from '@depth-studio/types';
// ๐ Types ูู @depth-studio/types: ููู Type Safety ุงููุงูู
// ๐ ุงููุงุฆุฏุฉ ุงูุนูููุฉ:
//    - User: ูุงุฌูุฉ ุงููุณุชุฎุฏู ุงูุดุงููุฉ (143 ุณุทุฑ) ุชุญุชูู ุนูู:
//      * ุงููุนูููุงุช ุงูุฃุณุงุณูุฉ (full_name, email, phone, profile_photo_url)
//      * ุงูุฏูุฑ ูุงูุตูุงุญูุงุช (role, status, permissions)
//      * ุงูุฅุนุฏุงุฏุงุช (preferences: language, notifications, theme)
//      * ุงูููู ุงูุดุฎุตู (profile: bio, avatar_url, social_links)
//      * ูุนูููุงุช ุงููุตุงุฏูุฉ (auth_methods, firebase_uid)
//    - ValidationResult: ูุงุฌูุฉ ูุชุงุฆุฌ ุงูุชุญูู ุชุญุชูู ุนูู:
//      * isValid: boolean ููุญุงูุฉ ุงูุนุงูุฉ
//      * errors: ValidationError[] ููุฃุฎุทุงุก ูุน field ูmessage
//      * warnings: ValidationWarning[] ููุชุญุฐูุฑุงุช ูุงูุงูุชุฑุงุญุงุช
// ๐ ุงูุชูุงูู ุงููุงูู:
//    - Backend: ููุณ User interface ูู backend/src/types
//    - Frontend: ูุชุทุงุจู ูุน auth.store.ts ูjููุน ุงูุฎุฏูุงุช
//    - Validation: ูุชูุงูู ูุน frontend-user-validators.ts

// ======================================
// ๐๏ธ ุฃููุงุน ุงูุจูุงูุงุช ุงููุญููุฉ
// ======================================

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

interface ProfileFormData extends CompleteProfileUpdate {
  // ุฅุถุงูุฉ fields ุฅุถุงููุฉ ููู UI
  confirmEmail?: string;
  displayPhone?: string; // ููุนุฑุถ ุงูููุณู
}

// ======================================
// ๐ง ููููุงุช ูุณุงุนุฏุฉ
// ======================================

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`profile-tabpanel-${index}`}
      aria-labelledby={`profile-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

// ======================================
// ๐จ ุงููููู ุงูุฑุฆูุณู
// ======================================

export default function ProfilePage() {
  // ======================================
  // ๐ ุงูุญุงูุฉ ูุงูุจูุงูุงุช
  // ======================================
  
  const { user, isLoading: authLoading } = useAuth();
  // ๐ง ุงุณุชุฎุฑุงุฌ user ูู auth store ูุน loading state
  
  const [activeTab, setActiveTab] = useState(0);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<ValidationResult | null>(null);
  
  // ุตูุฑุฉ ุงูููู ุงูุดุฎุตู
  const [photoUploadOpen, setPhotoUploadOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);
  
  // ุจูุงูุงุช ุงููููุฐุฌ
  const [formData, setFormData] = useState<ProfileFormData>({
    full_name: '',
    display_name: '',
    first_name: '',
    last_name: '',
    email: '',
    phone: '',
    bio: '',
    location: '',
    timezone: '',
    preferences: {
      language: 'ar',
      notifications_enabled: true,
      email_notifications: true,
      sms_notifications: true,
      theme: 'light'
    },
    profile: {
      bio: '',
      avatar_url: '',
      social_links: {}
    }
  });

  // ======================================
  // ๐ ุชุญููู ุงูุจูุงูุงุช
  // ======================================
  
  useEffect(() => {
    if (user) {
      // ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏู ูู ุงููููุฐุฌ ูุน ุงุณุชุฎุฏุงู User interface
      const currentUser: User = user; // ุชุฃููุฏ ููุน ุงูุจูุงูุงุช
      setFormData({
        full_name: currentUser.full_name || '',
        display_name: currentUser.display_name || '',
        first_name: currentUser.first_name || '',
        last_name: currentUser.last_name || '',
        email: currentUser.email || '',
        phone: currentUser.phone || '',
        displayPhone: currentUser.phone ? formatIraqiPhone(currentUser.phone) : '',
        bio: currentUser.profile?.bio || '',
        location: currentUser.location || '',
        timezone: currentUser.timezone || '',
        preferences: {
          language: currentUser.preferences?.language || 'ar',
          notifications_enabled: currentUser.preferences?.notifications_enabled ?? true,
          email_notifications: currentUser.preferences?.email_notifications ?? true,
          sms_notifications: currentUser.preferences?.sms_notifications ?? true,
          theme: currentUser.preferences?.theme || 'light'
        },
        profile: {
          bio: currentUser.profile?.bio || '',
          avatar_url: currentUser.profile?.avatar_url || '',
          social_links: currentUser.profile?.social_links || {}
        }
      });
    }
  }, [user]);

  // ======================================
  // ๐ฏ ูุนุงูุฌุงุช ุงูุฃุญุฏุงุซ
  // ======================================

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleEditToggle = () => {
    if (isEditing) {
      // ุฅูุบุงุก ุงูุชุญุฑูุฑ - ุฅุนุงุฏุฉ ุชุญููู ุงูุจูุงูุงุช ุงูุฃุตููุฉ
      if (user) {
        setFormData(prev => ({
          ...prev,
          full_name: user.full_name || '',
          display_name: user.display_name || '',
          email: user.email || '',
          phone: user.phone || '',
          bio: user.profile?.bio || '',
          location: user.location || '',
        }));
      }
      setValidationErrors(null);
      setError(null);
    }
    setIsEditing(!isEditing);
  };

  const handleInputChange = (field: keyof ProfileFormData) => (
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const value = event.target.value;
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // ูุณุญ ุงูุฃุฎุทุงุก ุนูุฏ ุงูุชุญุฑูุฑ
    if (validationErrors?.errors.some(err => err.field === field)) {
      setValidationErrors(null);
    }
  };

  const handlePreferenceChange = (field: keyof PreferencesUpdateData) => (
    event: React.ChangeEvent<HTMLInputElement> | SelectChangeEvent<string>
  ) => {
    const value = 'checked' in event.target 
      ? event.target.checked 
      : event.target.value;
    setFormData(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences!,
        [field]: value
      }
    }));
  };

  const handleSaveProfile = async () => {
    if (!user) return;
    
    setIsLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      // ุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ุฃููุงู
      const validation = validateProfileData(formData);
      if (!validation.isValid) {
        setValidationErrors(validation);
        setIsLoading(false);
        return;
      }
      
      // ุญูุธ ุงูุจูุงูุงุช
      const result: ProfileUpdateResponse = await updateProfile(user.id, formData);
      
      if (result.success) {
        setSuccess('ุชู ุชุญุฏูุซ ุงูููู ุงูุดุฎุตู ุจูุฌุงุญ! ๐');
        setIsEditing(false);
        setValidationErrors(null);
        
        // ุฅุฎูุงุก ุฑุณุงูุฉ ุงููุฌุงุญ ุจุนุฏ 3 ุซูุงูู
        setTimeout(() => setSuccess(null), 3000);
      } else {
        setError(result.message || 'ูุดู ูู ุชุญุฏูุซ ุงูููู ุงูุดุฎุตู');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'ุฎุทุฃ ุบูุฑ ูุชููุน');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePhotoSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    // ุชุญูู ูู ุตุญุฉ ุงูููู
    const validation = validateImageFile(file);
    if (!validation.isValid) {
      setError(validation.error || 'ููู ุบูุฑ ุตุงูุญ');
      return;
    }
    
    setSelectedFile(file);
    
    // ุฅูุดุงุก preview ููุตูุฑุฉ
    const reader = new FileReader();
    reader.onload = (e) => {
      setPhotoPreview(e.target?.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handlePhotoUpload = async () => {
    if (!selectedFile || !user) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await updateProfilePhoto(user.id, selectedFile);
      
      if (result.success) {
        setSuccess('ุชู ุชุญุฏูุซ ุตูุฑุฉ ุงูููู ุงูุดุฎุตู ุจูุฌุงุญ! ๐ธ');
        setPhotoUploadOpen(false);
        setSelectedFile(null);
        setPhotoPreview(null);
        
        setTimeout(() => setSuccess(null), 3000);
      } else {
        setError(result.message || 'ูุดู ูู ุฑูุน ุงูุตูุฑุฉ');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'ุฎุทุฃ ูู ุฑูุน ุงูุตูุฑุฉ');
    } finally {
      setIsLoading(false);
    }
  };

  // ุงุณุชุฎุฏุงู profileService ูุนุฑุถ ุฅุญุตุงุฆูุงุช ุฅุถุงููุฉ (ูุซุงู ูุงุณุชุฎุฏุงู ุฌููุน ุงูุงุณุชูุฑุงุฏุงุช)
  const getUserStats = () => {
    if (!user) return null;
    return profileService.extractInitials(user.full_name);
  };

  // ุงุณุชุฎุฏุงู updatePreferences ูู ุญุงูุฉ ุฎุงุตุฉ ูุชุญุฏูุซ ุณุฑูุน
  const handleQuickNotificationToggle = async () => {
    if (!user || !user.preferences) return;
    
    try {
      await updatePreferences(user.id, {
        notifications_enabled: !user.preferences.notifications_enabled
      });
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช:', error);
    }
  };

  // ======================================
  // ๐จ ุงููุงุฌูุฉ
  // ======================================

  if (authLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress size={40} />
        <Typography variant="h6" sx={{ ml: 2 }}>
          ุฌุงุฑู ุชุญููู ุงูููู ุงูุดุฎุตู...
        </Typography>
      </Box>
    );
  }

  if (!user) {
    return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Alert severity="error">
          ูุดู ูู ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏู. ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูุฑุฉ ุฃุฎุฑู.
        </Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* ุฑุณุงุฆู ุงูุชูุจูู */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}
      
      {success && (
        <Alert severity="success" sx={{ mb: 3 }} onClose={() => setSuccess(null)}>
          {success}
        </Alert>
      )}
      
      {validationErrors && !validationErrors.isValid && (
        <Alert severity="warning" sx={{ mb: 3 }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
            ูุฑุฌู ุชุตุญูุญ ุงูุฃุฎุทุงุก ุงูุชุงููุฉ:
          </Typography>
          {validationErrors.errors.map((error, index) => (
            <Typography key={index} variant="body2" component="li">
              {error.message}
            </Typography>
          ))}
        </Alert>
      )}

      {/* Header ูุน ูุนูููุงุช ุงููุณุชุฎุฏู ุงูุฃุณุงุณูุฉ */}
      <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
        <Box display="flex" gap={3} alignItems="center" flexWrap="wrap">
          <Avatar
            src={user.profile_photo_url}
            sx={{ 
              width: 100, 
              height: 100, 
              fontSize: '2rem',
              bgcolor: 'primary.main'
            }}
          >
            {extractInitials(user.full_name)}
          </Avatar>
          
          <Box flex={1} minWidth={300}>
            <Typography variant="h4" gutterBottom>
              {user.full_name}
            </Typography>
            
            <Typography variant="body1" color="text.secondary" gutterBottom>
              {user.display_name && `${user.display_name} โข `}
              <Chip 
                label={user.role} 
                size="small" 
                color="primary" 
                sx={{ mx: 1 }}
              />
              {user.is_verified && (
                <Chip 
                  icon={<VerifiedIcon />}
                  label="ูุญูู"
                  size="small"
                  color="success"
                  sx={{ mx: 1 }}
                />
              )}
            </Typography>
            
            <Typography variant="body2" color="text.secondary">
              {user.profile?.bio || 'ูุง ุชูุฌุฏ ูุจุฐุฉ ุดุฎุตูุฉ'}
            </Typography>
            
            <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
              ุฅุญุตุงุฆูุงุช: {getUserStats()}
            </Typography>
          </Box>
          
          <Box display="flex" gap={1} flexDirection={{ xs: 'column', sm: 'row' }}>
            <Button
              variant="outlined"
              startIcon={<PhotoCameraIcon />}
              onClick={() => setPhotoUploadOpen(true)}
            >
              ุชุบููุฑ ุงูุตูุฑุฉ
            </Button>
            
            <Button
              variant={isEditing ? "outlined" : "contained"}
              startIcon={isEditing ? <CancelIcon /> : <EditIcon />}
              onClick={handleEditToggle}
              disabled={isLoading}
            >
              {isEditing ? 'ุฅูุบุงุก' : 'ุชุญุฑูุฑ'}
            </Button>
            
            {isEditing && (
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={handleSaveProfile}
                disabled={isLoading}
                color="success"
              >
                {isLoading ? <CircularProgress size={20} /> : 'ุญูุธ'}
              </Button>
            )}
            
            <Button
              variant="text"
              size="small"
              onClick={handleQuickNotificationToggle}
              sx={{ fontSize: '0.75rem' }}
            >
              ุชุจุฏูู ุงูุฅุดุนุงุฑุงุช
            </Button>
          </Box>
        </Box>
      </Paper>

      {/* Tabs ูููุญุชูู */}
      <Paper elevation={1}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          variant="fullWidth"
          sx={{ borderBottom: 1, borderColor: 'divider' }}
        >
          <Tab 
            icon={<PersonIcon />} 
            label="ุงููุนูููุงุช ุงูุดุฎุตูุฉ" 
            id="profile-tab-0"
            aria-controls="profile-tabpanel-0"
          />
          <Tab 
            icon={<SettingsIcon />} 
            label="ุงูุฅุนุฏุงุฏุงุช" 
            id="profile-tab-1"
            aria-controls="profile-tabpanel-1"
          />
        </Tabs>

        {/* Tab 1: ุงููุนูููุงุช ุงูุดุฎุตูุฉ */}
        <TabPanel value={activeTab} index={0}>
          <Box display="flex" gap={3} flexDirection={{ xs: 'column', md: 'row' }}>
            {/* ูุนูููุงุช ุฃุณุงุณูุฉ */}
            <Box flex={1}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    <PersonIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    ุงููุนูููุงุช ุงูุฃุณุงุณูุฉ
                  </Typography>
                  
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                    <TextField
                      label="ุงูุงุณู ุงููุงูู"
                      value={formData.full_name}
                      onChange={handleInputChange('full_name')}
                      disabled={!isEditing}
                      fullWidth
                      required
                      error={validationErrors?.errors.some(err => err.field === 'full_name')}
                    />
                    
                    <TextField
                      label="ุงุณู ุงูุนุฑุถ"
                      value={formData.display_name}
                      onChange={handleInputChange('display_name')}
                      disabled={!isEditing}
                      fullWidth
                    />
                    
                    <TextField
                      label="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู"
                      type="email"
                      value={formData.email}
                      onChange={handleInputChange('email')}
                      disabled={!isEditing}
                      fullWidth
                      required
                      error={validationErrors?.errors.some(err => err.field === 'email')}
                      InputProps={{
                        startAdornment: <EmailIcon sx={{ mr: 1, color: 'text.secondary' }} />
                      }}
                    />
                    
                    <TextField
                      label="ุฑูู ุงููุงุชู ุงูุนุฑุงูู"
                      value={isEditing ? formData.phone : formData.displayPhone}
                      onChange={handleInputChange('phone')}
                      disabled={!isEditing}
                      fullWidth
                      placeholder="07XXXXXXXX"
                      error={validationErrors?.errors.some(err => err.field === 'phone')}
                      InputProps={{
                        startAdornment: <PhoneIcon sx={{ mr: 1, color: 'text.secondary' }} />
                      }}
                    />
                  </Box>
                </CardContent>
              </Card>
            </Box>

            {/* ูุนูููุงุช ุฅุถุงููุฉ */}
            <Box flex={1}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    <LocationIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    ูุนูููุงุช ุฅุถุงููุฉ
                  </Typography>
                  
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                    <TextField
                      label="ุงููููุน"
                      value={formData.location}
                      onChange={handleInputChange('location')}
                      disabled={!isEditing}
                      fullWidth
                      placeholder="ุจุบุฏุงุฏุ ุงูุนุฑุงู"
                    />
                    
                    <TextField
                      label="ุงูููุทูุฉ ุงูุฒูููุฉ"
                      value={formData.timezone}
                      onChange={handleInputChange('timezone')}
                      disabled={!isEditing}
                      fullWidth
                      placeholder="Asia/Baghdad"
                    />
                    
                    <TextField
                      label="ุงููุจุฐุฉ ุงูุดุฎุตูุฉ"
                      value={formData.bio}
                      onChange={handleInputChange('bio')}
                      disabled={!isEditing}
                      fullWidth
                      multiline
                      rows={4}
                      placeholder="ุงูุชุจ ูุจุฐุฉ ุนู ููุณู..."
                      error={validationErrors?.errors.some(err => err.field === 'bio')}
                      helperText="ุงูุญุฏ ุงูุฃูุตู 500 ุญุฑู"
                    />
                  </Box>
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>

        {/* Tab 2: ุงูุฅุนุฏุงุฏุงุช */}
        <TabPanel value={activeTab} index={1}>
          <Box display="flex" gap={3} flexDirection={{ xs: 'column', md: 'row' }}>
            {/* ุฅุนุฏุงุฏุงุช ุงููุบุฉ ูุงููุธูุฑ */}
            <Box flex={1}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    <LanguageIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    ุงููุบุฉ ูุงููุธูุฑ
                  </Typography>
                  
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                    <FormControl fullWidth>
                      <InputLabel>ุงููุบุฉ</InputLabel>
                      <Select
                        value={formData.preferences?.language || 'ar'}
                        onChange={(e) => handlePreferenceChange('language')(e)}
                        disabled={!isEditing}
                      >
                        <MenuItem value="ar">ุงูุนุฑุจูุฉ</MenuItem>
                        <MenuItem value="en">English</MenuItem>
                      </Select>
                    </FormControl>
                    
                    <FormControl fullWidth>
                      <InputLabel>ุงููุธูุฑ</InputLabel>
                      <Select
                        value={formData.preferences?.theme || 'light'}
                        onChange={(e) => handlePreferenceChange('theme')(e)}
                        disabled={!isEditing}
                      >
                        <MenuItem value="light">ูุงุชุญ</MenuItem>
                        <MenuItem value="dark">ุฏุงูู</MenuItem>
                      </Select>
                    </FormControl>
                  </Box>
                </CardContent>
              </Card>
            </Box>

            {/* ุฅุนุฏุงุฏุงุช ุงูุฅุดุนุงุฑุงุช */}
            <Box flex={1}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    <NotificationsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    ุงูุฅุดุนุงุฑุงุช
                  </Typography>
                  
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mt: 2 }}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={formData.preferences?.notifications_enabled ?? true}
                          onChange={handlePreferenceChange('notifications_enabled')}
                          disabled={!isEditing}
                        />
                      }
                      label="ุชูุนูู ุงูุฅุดุนุงุฑุงุช"
                    />
                    
                    <FormControlLabel
                      control={
                        <Switch
                          checked={formData.preferences?.email_notifications ?? true}
                          onChange={handlePreferenceChange('email_notifications')}
                          disabled={!isEditing || !formData.preferences?.notifications_enabled}
                        />
                      }
                      label="ุฅุดุนุงุฑุงุช ุงูุจุฑูุฏ ุงูุฅููุชุฑููู"
                    />
                    
                    <FormControlLabel
                      control={
                        <Switch
                          checked={formData.preferences?.sms_notifications ?? true}
                          onChange={handlePreferenceChange('sms_notifications')}
                          disabled={!isEditing || !formData.preferences?.notifications_enabled}
                        />
                      }
                      label="ุฅุดุนุงุฑุงุช ุงูุฑุณุงุฆู ุงููุตูุฉ"
                    />
                  </Box>
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>
      </Paper>

      {/* Dialog ุฑูุน ุงูุตูุฑุฉ */}
      <Dialog 
        open={photoUploadOpen} 
        onClose={() => setPhotoUploadOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>ุชุบููุฑ ุตูุฑุฉ ุงูููู ุงูุดุฎุตู</DialogTitle>
        <DialogContent>
          <Box sx={{ textAlign: 'center', p: 2 }}>
            {photoPreview ? (
              <Avatar
                src={photoPreview}
                sx={{ width: 120, height: 120, mx: 'auto', mb: 2 }}
              />
            ) : (
              <Avatar
                sx={{ width: 120, height: 120, mx: 'auto', mb: 2, bgcolor: 'grey.300' }}
              >
                <PhotoCameraIcon sx={{ fontSize: 40 }} />
              </Avatar>
            )}
            
            <input
              accept="image/*"
              style={{ display: 'none' }}
              id="photo-upload-button"
              type="file"
              onChange={handlePhotoSelect}
            />
            <label htmlFor="photo-upload-button">
              <Button variant="outlined" component="span" fullWidth>
                ุงุฎุชูุงุฑ ุตูุฑุฉ
              </Button>
            </label>
            
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              ุงูุญุฏ ุงูุฃูุตู: 5MB โข ุงูุฃููุงุน ุงููุฏุนููุฉ: JPG, PNG, WebP
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPhotoUploadOpen(false)}>
            ุฅูุบุงุก
          </Button>
          <Button 
            onClick={handlePhotoUpload}
            disabled={!selectedFile || isLoading}
            variant="contained"
          >
            {isLoading ? <CircularProgress size={20} /> : 'ุฑูุน ุงูุตูุฑุฉ'}
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
} 