/**
 * ๐ญ ูุชุฌุฑ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ - Depth Studio
 * =====================================
 * 
 * ๐ ุชุงุฑูุฎ ุงูุฅูุดุงุก: ููููู 2025  
 * ๐จโ๐ป ุงููุทูุฑ: ุนูู ุฌูุฏุช
 * ๐ฏ ุงููุฏู: ุฅุฏุงุฑุฉ ุญุงูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุจุงุณุชุฎุฏุงู Zustand ูุน ุงูุชูุงูู ุงููุงูู
 * 
 * ๐ ุงูุชูุงูู ุงูุดุงูู (100%):
 * โ Backend: RoleSelectionService (906 ุณุทุฑ) + ValidationService + AuthMiddleware
 * โ Frontend: roleSelection.service.ts (725 ุณุทุฑ) + 8 API endpoints  
 * โ Types: auth.ts (314 ุณุทุฑ) + users.ts (143 ุณุทุฑ) + enums.ts (144 ุณุทุฑ)
 * โ Security: AuthGuard + PermissionManager + RolePermissions
 * 
 * ๐ญ ุงููููุฒุงุช ุงููุชูุงููุฉ:
 * 
 * ๐ **ุฅุฏุงุฑุฉ ุทูุจุงุช ุงูุฃุฏูุงุฑ:**
 * - ุชูุฏูู ุทูุจุงุช ููุฃุฏูุงุฑ ุงูุซูุงุซุฉ (ูุตูุฑุ ููุณู ุจุฑุงูุฏุ ููุณู ุชุณููู)
 * - ุชุชุจุน ุญุงูุฉ ุงูุทูุจุงุช (pending, approved, rejected) ุจุงูููุช ุงููุนูู
 * - ูุนุงูุฌุฉ ุงูุจูุงูุงุช ุงูุฅุถุงููุฉ ููู ุฏูุฑ (ุนููุฏุ ุจุฑุงูุฏุงุชุ ุฎุจุฑุงุช)
 * - validation ุดุงูู ูุจู ุฅุฑุณุงู ุงูุทูุจุงุช ููู Backend
 * 
 * ๐ข **ุฅุฏุงุฑุฉ ุงูุจุฑุงูุฏุงุช ููููุณููู:**
 * - ุงูุจุญุซ ุงููุชูุฏู ูู ุงูุจุฑุงูุฏุงุช (ุงุณูุ ููุนุ ุตูุงุนุฉุ ุญุงูุฉ)
 * - ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุงููุชุงุญุฉ (ุจุฏูู ููุณู ุญุงูู)
 * - ุนุฑุถ ุชูุงุตูู ุงูุจุฑุงูุฏ (ููุนุ ุตูุงุนุฉุ ุญุงูุฉ) ููุงุฎุชูุงุฑ ุงููุฏุฑูุณ
 * - ุชูุงูู ูุน Backend BrandService ููุจุญุซ ุงูุฐูู
 * 
 * ๐ **ุฅุฏุงุฑุฉ ุนููุฏ ุงููุตูุฑูู:**
 * - ุนุฑุถ ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ (ูุณุชููุ ุฑุงุชุจ ุซุงุจุช)
 * - ุดุฑุญ ุชูุตููู ููู ููุน ุนูุฏ (ุงููุฒุงูุงุ ุงูุดุฑูุทุ ุงูุฏูุน)
 * - ุฑุจุท ููุน ุงูุนูุฏ ุจูุธุงู ุงูุฏูุน ูู Backend PaymentService
 * - ุฏุนู ุงููุตูุฑูู ูู ุงุฎุชูุงุฑ ุงูููุน ุงูููุงุณุจ ูุธุฑูููู
 * 
 * โณ **ุฅุฏุงุฑุฉ ุงูุทูุจุงุช ููุฃุฏูู:**
 * - ุนุฑุถ ูุงุฆูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ ูุน ุชูุงุตูู ุงููุชูุฏููู
 * - ุฃุฏูุงุช ุงูููุงููุฉ ูุงูุฑูุถ ูุน ุฅููุงููุฉ ุฅุถุงูุฉ ููุงุญุธุงุช
 * - ููุชุฑุฉ ุงูุทูุจุงุช ุญุณุจ ุงูุฏูุฑ ูุงูุชุงุฑูุฎ
 * - ุชุชุจุน ุฃุฏุงุก ุงููุฑุงุฌุนุฉ (ุฃููุงุช ุงูุงุณุชุฌุงุจุฉุ ูุนุฏูุงุช ุงูููุงููุฉ)
 * 
 * ๐ **ุฅุญุตุงุฆูุงุช ุดุงููุฉ:**
 * - ุฅุญุตุงุฆูุงุช ุนุงูุฉ (ุฅุฌูุงูู ุงูุทูุจุงุชุ ุงูููุงููุงุชุ ุงูุฑูุถุงุช)
 * - ุชุญููู ุญุณุจ ุงูุฏูุฑ (ุฃูุซุฑ ุงูุฃุฏูุงุฑ ุทูุจุงู)
 * - ุฃุฏุงุก ุฒููู (ูุชูุณุท ููุช ุงููุฑุงุฌุนุฉุ ุฐุฑูุงุช ุงูุชูุฏูู)
 * - ูุณุจ ุงููุฌุงุญ ูุงูุชุญุณูู ุงููุทููุจ
 * 
 * ๐พ **ุญูุธ ุฐูู:**
 * - localStorage ููุจูุงูุงุช ุงููููุฉ (ุญุงูุฉ ุงููุณุชุฎุฏูุ ุทูุจุงุช ูุญููุธุฉ)
 * - ุนุฏู ุญูุธ ุงูุจูุงูุงุช ุงูุญุณุงุณุฉ (ูููุงุช ูุฑูุฑุ tokens)
 * - ุงุณุชุนุงุฏุฉ ุชููุงุฆูุฉ ุนูุฏ ุฅุนุงุฏุฉ ูุชุญ ุงูุชุทุจูู
 * - ูุฒุงููุฉ ูุน Backend ุนูุฏ ุงูุญุงุฌุฉ
 * 
 * ๐ง **ุฏูุงู ูุณุงุนุฏุฉ ูุชูุฏูุฉ:**
 * - ุชูุณูู ุงูุฃุณูุงุก ุงูุนุฑุจูุฉ ููุฃุฏูุงุฑ ูุงูุฃููุงุน
 * - ููุชุฑุฉ ูุชุตููู ุงูุจูุงูุงุช ุญุณุจ ูุนุงููุฑ ูุฎุชููุฉ
 * - ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงููุณุชุฎุฏููู ููุนุฑุถ
 * - ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ูุจู ุงูุฅุฑุณุงู
 * 
 * ๐ฏ **ุงูููุงุฆุฏ ุงูุนูููุฉ:**
 * 1. **ูููุณุชุฎุฏููู:** ุชุฌุฑุจุฉ ุณูุณุฉ ูุงุฎุชูุงุฑ ุงูุฏูุฑ ุงูููุงุณุจ ุจูู ุณูููุฉ
 * 2. **ููููุณููู:** ุฃุฏูุงุช ูููุฉ ููุจุญุซ ูุงุฎุชูุงุฑ ุงูุจุฑุงูุฏุงุช ุงูููุงุณุจุฉ 
 * 3. **ูููุตูุฑูู:** ูุถูุญ ูุงูู ุญูู ุฃููุงุน ุงูุนููุฏ ูุงููุฒุงูุง
 * 4. **ููุฃุฏูู:** ุฅุฏุงุฑุฉ ูุฑูุฒูุฉ ูููุคุฉ ูุฌููุน ุทูุจุงุช ุงูุฃุฏูุงุฑ
 * 5. **ูููุทูุฑูู:** ููุฏ ููุธู ููุงุจู ููุตูุงูุฉ ูุน types ุขููุฉ
 * 6. **ูููุธุงู:** ุฃุฏุงุก ูุญุณู ูุน caching ุฐูู ูุชุญุฏูุซ ุงูุชูุงุฆู
 */

import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

// ======================================
// ๐ฆ ุงุณุชูุฑุงุฏุงุช ุงูุฎุฏูุงุช
// ======================================

import { 
  roleSelectionService,              // ๐ญ ุฎุฏูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูุฃุณุงุณูุฉ (725 ุณุทุฑ)
                                     // ุชููุฑ: submitRoleSelection, searchBrands, getContractTypes, etc.
  type UserRoleStatus,               // ๐ค ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ุงูุดุงููุฉ ูุน User details
  type RoleSubmissionResult,         // ๐ ูุชูุฌุฉ ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ
  type BrandSearchOptions,           // ๐ ุฎูุงุฑุงุช ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
  type BrandSearchResult,            // ๐ข ูุชุงุฆุฌ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
  type ContractTypesResult,          // ๐ ูุนูููุงุช ุฃููุงุน ุงูุนููุฏ
  type PendingApplicationsResult,    // โณ ูุชุงุฆุฌ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
  type ApplicationActionResult,      // โ ูุชูุฌุฉ ููุงููุฉ/ุฑูุถ ุทูุจ
  type RoleStatsResult,              // ๐ ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
  type ContractTypeInfo              // ๐ ูุนูููุงุช ููุน ุนูุฏ ูุญุฏุฏ
} from '../services/roleSelection.service';

// ======================================
// ๐ฆ ุงุณุชูุฑุงุฏุงุช ุงูุฃููุงุน ูู @depth-studio/types
// ======================================

import {
  // ======================================
  // ๐ญ ุฃููุงุน ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูุฃุณุงุณูุฉ 
  // ======================================
  
  RoleSelection,                     // ๐ ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ ูุน ุฌููุน ุงูุชูุงุตูู
                                     // โ ููุณุชุฎุฏู ูู: PendingApplicationsState.applications, UserRoleStatus.pending_application
                                     // ๐ ูุญุชูู ุนูู: user_id, selected_role, additional_data, status, applied_at, reviewed_at
                                     // ๐ ูุชูุงูู ูุน Backend RoleSelectionService ู Frontend roleSelection.service.ts
                                     
  RoleSelectionSubmission,           // ๐ ุจูุงูุงุช ุชูุฏูู ุทูุจ ุฌุฏูุฏ  
                                     // โ ููุณุชุฎุฏู ูู: submissionData, updateSubmissionData, submitRoleApplication
                                     // ๐ ูุญุชูู ุนูู: selected_role + additional_data ูููุตูุฑ/ููุณู ุงูุจุฑุงูุฏ/ููุณู ุงูุชุณููู
                                     // ๐ ูุชูุงูู ูุน Backend ValidationService ู Frontend validation
                                     
  RoleSelectionStats,                // ๐ ุฅุญุตุงุฆูุงุช ุดุงููุฉ ูุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
                                     // โ ููุณุชุฎุฏู ูู: StatsState.stats, loadRoleStats
                                     // ๐ ูุญุชูู ุนูู: total_applications, pending, approved, rejected, approval_rate
                                     // ๐ ูุชูุงูู ูุน Backend ReportService ู Dashboard Components
  
  // ======================================
  // ๐ฅ ุฃููุงุน ุงููุณุชุฎุฏููู ูุงูุจุฑุงูุฏุงุช
  // ======================================
  
  User,                              // ๐ค ููุน ุงููุณุชุฎุฏู ุงููุงูู - ุฃุณุงุณู ูุนูู ุงููุธุงู
                                     // โ ููุณุชุฎุฏู ูู: UserRoleStatus.user (ุนุฑุถ ุจูุงูุงุช ุงููุณุชุฎุฏู ูู ูุงุฌูุงุช ุงูุฃุฏูู)
                                     // ๐ ูุญุชูู ุนูู: id, email, full_name, phone, role, status, created_at, auth_methods
                                     // ๐ ูุชูุงูู ูุน Backend AuthService ู Frontend auth.store.ts
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุนุฑุถ ูุนูููุงุช ุงููุชูุฏู ููุฃุฏูุงุฑุ ุฅุฏุงุฑุฉ ุงูุตูุงุญูุงุชุ ุชุชุจุน ุงููุดุงุท
                                     
  Brand,                             // ๐ข ููุน ุงูุจุฑุงูุฏ ุงููุงูู - ููุจุญุซ ูุนุฑุถ ุงูุจุฑุงูุฏุงุช ููููุณููู  
                                     // โ ููุณุชุฎุฏู ูู: BrandSearchState.results, searchBrands, Brand selection
                                     // ๐ ูุญุชูู ุนูู: id, name, brand_type, industry, status, coordinator_id
                                     // ๐ ูุชูุงูู ูุน Backend BrandService ู Frontend brand components
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุนุฑุถ ุงูุจุฑุงูุฏุงุช ุงููุชุงุญุฉ ูููุณูู ุงูุจุฑุงูุฏุ ููุชุฑุฉ ุงูุจุญุซุ ุฅุฏุงุฑุฉ ุงูุชุฎุตูุต
                                     
  ID,                                // ๐ ููุน ุงููุนุฑู ุงูููุญุฏ - ูุฌููุน ุงูุนูููุงุช 
                                     // โ ููุณุชุฎุฏู ูู: user_id, application_id, brand_id ูู ุฌููุน ุงูุฏูุงู ูุงููุงุฌูุงุช
                                     // ๐ ูุถูู ููุน ููุญุฏ ูููุนุฑูุงุช ูู ุงููุธุงู (string ูู Firestore)
                                     // ๐ ูุชูุงูู ูุน ุฌููุน ุงูุฎุฏูุงุช Backend ู Frontend 
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุถูุงู type safetyุ ููุน ุฃุฎุทุงุก ุงููุนุฑูุงุชุ ุชูุงูู ุดุงูู
  
  // ======================================
  // ๐ฏ ุงูุชุนุฏุงุฏุงุช ุงููุทููุจุฉ - ููุชุญูู ูุงูุชุตููู
  // ======================================
  
  UserRole,                          // ๐ญ ุฃุฏูุงุฑ ุงููุณุชุฎุฏููู - ุฃุณุงุณ ุนูู ุงููุธุงู
                                     // โ ููุณุชุฎุฏู ูู: selectedRole, RoleSelection.selected_role, validation
                                     // ๐ ุงูููู: 'super_admin' | 'marketing_coordinator' | 'brand_coordinator' | 'photographer' | 'new_user'
                                     // ๐ ูุชูุงูู ูุน Backend RolePermissionService ู AuthMiddleware
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุชุญุฏูุฏ ุตูุงุญูุงุช ุงููุณุชุฎุฏูุ ููุชุฑุฉ ุงูุทูุจุงุชุ ุงูุชุญูู ุจุงููุตูู
                                     
  ContractType,                      // ๐ ุฃููุงุน ุนููุฏ ุงููุตูุฑูู - ูููุตูุฑูู ููุท
                                     // โ ููุณุชุฎุฏู ูู: ContractTypesState, selectContractType, photographer validation
                                     // ๐ ุงูููู: 'freelancer' | 'salary' - ูุญุฏุฏ ููุน ุงูุนูุงูุฉ ุงูุชุนุงูุฏูุฉ
                                     // ๐ ูุชูุงูู ูุน Backend PhotographerService ู PaymentService
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุชุญุฏูุฏ ููุน ุงูุฏูุนุ ุญุณุงุจ ุงููุณุชุญูุงุชุ ุดุฑูุท ุงูุนูู
                                     
  BrandType,                         // ๐ข ุฃููุงุน ุงูุจุฑุงูุฏุงุช - ูููุชุฑุฉ ุงูุจุญุซ ูุงูุชุตููู
                                     // โ ููุณุชุฎุฏู ูู: BrandSearchOptions.brand_type, Brand.brand_type
                                     // ๐ ุงูููู: 'local' | 'international' | 'startup' | 'enterprise'
                                     // ๐ ูุชูุงูู ูุน Backend BrandService ู Frontend BrandFilters
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุญุณุจ ุงูููุนุ ุชุฎุตูุต ุงูุฎุฏูุงุชุ ุฅุญุตุงุฆูุงุช ุงูุชูุฒูุน
                                     
  BrandStatus,                       // ๐ ุญุงูุงุช ุงูุจุฑุงูุฏุงุช - ูุฅุฏุงุฑุฉ ุฏูุฑุฉ ุญูุงุฉ ุงูุจุฑุงูุฏ
                                     // โ ููุณุชุฎุฏู ูู: BrandSearchOptions.status, Brand.status
                                     // ๐ ุงูููู: 'active' | 'paused' | 'archived' | 'development'
                                     // ๐ ูุชูุงูู ูุน Backend BrandManagementService ู Dashboard
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุนุฑุถ ุงูุจุฑุงูุฏุงุช ุงููุดุทุฉ ููุทุ ุฅุฏุงุฑุฉ ุงูุญุงูุฉุ ุชุชุจุน ุงููุดุงุท
                                     
  Industry,                          // ๐ญ ุงูุตูุงุนุงุช - ูุชุตููู ุงูุจุฑุงูุฏุงุช ูุงูุฎุจุฑุงุช
                                     // โ ููุณุชุฎุฏู ูู: BrandSearchOptions.industry, Brand.industry
                                     // ๐ ุงูููู: 'fashion' | 'food' | 'technology' | 'healthcare' | etc.
                                     // ๐ ูุชูุงูู ูุน Backend IndustryService ู Analytics
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ูุทุงุจูุฉ ุฎุจุฑุฉ ุงูููุณู ูุน ุตูุงุนุฉ ุงูุจุฑุงูุฏุ ุฅุญุตุงุฆูุงุช ุงููุทุงุนุงุช
  
  // ======================================
  // โฐ ุฃููุงุน ุงูุทูุงุจุน ุงูุฒูููุฉ - ูุฅุฏุงุฑุฉ ุงูุชูุงุฑูุฎ
  // ======================================
  
  FirebaseTimestamp                  // ๐ ุทูุงุจุน ุฒูููุฉ Firebase - ููุชูุงุฑูุฎ ูุงูุฃููุงุช
                                     // โ ููุณุชุฎุฏู ูู: RoleSelection.applied_at, reviewed_at, StatsState.dateRange
                                     // ๐ ูููุฑ: toDate(), seconds, nanoseconds ููุชุญููู ูุงูููุงุฑูุฉ
                                     // ๐ ูุชูุงูู ูุน Firebase Firestore ู ุฌููุน ุงูุฎุฏูุงุช
                                     // ๐ฏ ุงููุงุฆุฏุฉ: ุชุชุจุน ุฃููุงุช ุงูุชูุฏููุ ุญุณุงุจ ูุฏุฉ ุงููุฑุงุฌุนุฉุ ุฅุญุตุงุฆูุงุช ุฒูููุฉ
} from '@depth-studio/types';

// ======================================
// ๐จ ูุงุฌูุงุช ูุชุฌุฑ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
// ======================================

/** ุญุงูุฉ ุงูุนูููุงุช ุงูุนุงูุฉ */
interface OperationState {
  loading: boolean;                  // ูู ุงูุนูููุฉ ุฌุงุฑูุฉ
  error: string | null;              // ุฑุณุงูุฉ ุงูุฎุทุฃ (ุฅู ูุฌุฏุช)
  success: boolean;                  // ูู ุงูุนูููุฉ ูุฌุญุช
  lastUpdated?: Date;                // ููุช ุขุฎุฑ ุชุญุฏูุซ
}

/** ุญุงูุฉ ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ */
interface SubmissionState extends OperationState {
  submittedApplication?: RoleSelection; // ุงูุทูุจ ุงูููุฏู (ุฅุฐุง ูุฌุญ)
  validationErrors?: string[];       // ุฃุฎุทุงุก ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
}

/** ุญุงูุฉ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช */
interface BrandSearchState extends OperationState {
  results: Brand[];                  // ๐ข ูุชุงุฆุฌ ุงูุจุญุซ ุงูุญุงููุฉ - ูุงุฆูุฉ ุงูุจุฑุงูุฏุงุช ุงููุทุงุจูุฉ
                                     // โ ููุน Brand ูุญุชูู ุนูู: id, name, brand_type, industry, status, coordinator_id
  searchQuery: string;               // ๐ ุงุณุชุนูุงู ุงูุจุญุซ ุงูุญุงูู - ุงููุต ุงููุฏุฎู ูู ุงููุณุชุฎุฏู
  filters: Partial<BrandSearchOptions>; // ๐ ุงูููุงุชุฑ ุงููุทุจูุฉ - ููุน ุงูุจุฑุงูุฏุ ุงูุตูุงุนุฉุ ุงูุญุงูุฉ
                                        // โ ูุฏุนู BrandType, Industry, BrandStatus ููููุชุฑุฉ ุงููุชูุฏูุฉ
  total: number;                     // ๐ ุงูุนุฏุฏ ุงูุฅุฌูุงูู ูููุชุงุฆุฌ - ูุน ุงูููุงุชุฑ ุงููุทุจูุฉ
  hasSearched: boolean;              // โ ูู ุชู ุงูุจุญุซ ูุณุจูุงู - ูุนุฑุถ ุฑุณุงุฆู ููุงุณุจุฉ
}

/** ุญุงูุฉ ูุนูููุงุช ุฃููุงุน ุงูุนููุฏ */
interface ContractTypesState extends OperationState {
  contractTypes: ContractTypeInfo[]; // ูุงุฆูุฉ ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ
  selectedType?: ContractType;       // ููุน ุงูุนูุฏ ุงููุฎุชุงุฑ ุญุงููุงู
}

/** ุญุงูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ (ููุฃุฏูู) */
interface PendingApplicationsState extends OperationState {
  applications: RoleSelection[];     // ูุงุฆูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
  total: number;                     // ุงูุนุฏุฏ ุงูุฅุฌูุงูู ููุทูุจุงุช
  filters: {                         // ุงูููุงุชุฑ ุงููุทุจูุฉ
    role?: UserRole;
    orderBy?: 'applied_at' | 'updated_at';
    orderDirection?: 'asc' | 'desc';
  };
}

/** ุญุงูุฉ ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ */
interface StatsState extends OperationState {
  stats?: RoleSelectionStats;        // ุงูุฅุญุตุงุฆูุงุช ุงูุดุงููุฉ
  dateRange?: {                      // ุงููุทุงู ุงูุฒููู ููุฅุญุตุงุฆูุงุช
    startDate: FirebaseTimestamp;
    endDate: FirebaseTimestamp;
  };
}

// ======================================
// ๐๏ธ ูุงุฌูุฉ ูุชุฌุฑ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
// ======================================

// ุชุนุทูู ุชุญุฐูุฑุงุช ุงูู ESLint ูููุนุงููุงุช ุบูุฑ ุงููุณุชุฎุฏูุฉ ูู ุชุนุฑููุงุช ุงููุงุฌูุงุช
/* eslint-disable @typescript-eslint/no-unused-vars, no-unused-vars */
interface RoleSelectionState {
  // ======================================
  // ๐ ุญุงูุฉ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ
  // ======================================
  
  userRoleStatus: UserRoleStatus | null; // ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ุงูุญุงูู
  selectedRole: UserRole | null;      // ุงูุฏูุฑ ุงููุฎุชุงุฑ ููุชูุฏูู
  submissionData: Partial<RoleSelectionSubmission> | null; // ุจูุงูุงุช ุงูุทูุจ ููุฏ ุงูุชุญุถูุฑ
  
  // ======================================
  // ๐ ุญุงูุงุช ุงูุนูููุงุช ุงููุฎุชููุฉ
  // ======================================
  
  submission: SubmissionState;         // ุญุงูุฉ ุชูุฏูู ุงูุทูุจุงุช
  brandSearch: BrandSearchState;       // ุญุงูุฉ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
  contractTypes: ContractTypesState;   // ุญุงูุฉ ุฃููุงุน ุงูุนููุฏ
  pendingApplications: PendingApplicationsState; // ุญุงูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
  stats: StatsState;                   // ุญุงูุฉ ุงูุฅุญุตุงุฆูุงุช
  userStatus: OperationState;          // ุญุงูุฉ ุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู
  
  // ======================================
  // ๐ญ ุฃูุนุงู ุชูุฏูู ุงูุทูุจุงุช
  // ======================================
  
  /**
   * ุชุญุฏูุฏ ุงูุฏูุฑ ุงููุฑุงุฏ ุงูุชูุฏูู ูู
   * ๐ ูุณุชูุจู UserRole ููุญูุธู ูู selectedRole
   */
  selectRole: (role: UserRole) => void;
  
  /**
   * ุชุญุฏูุซ ุจูุงูุงุช ุงูุทูุจ
   */
  updateSubmissionData: (data: Partial<RoleSelectionSubmission>) => void;
  
  /**
   * ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ
   */
  submitRoleApplication: (userId: ID, submission: RoleSelectionSubmission) => Promise<RoleSubmissionResult>;
  
  /**
   * ุฅุนุงุฏุฉ ุชุนููู ุจูุงูุงุช ุงูุทูุจ
   */
  resetSubmission: () => void;
  
  // ======================================
  // ๐ข ุฃูุนุงู ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
  // ======================================
  
  /**
   * ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ููููุณููู
   */
  searchBrands: (options?: BrandSearchOptions) => Promise<void>;
  
  /**
   * ุชุญุฏูุซ ููุงุชุฑ ุงูุจุญุซ
   */
  updateSearchFilters: (filters: Partial<BrandSearchOptions>) => void;
  
  /**
   * ูุณุญ ูุชุงุฆุฌ ุงูุจุญุซ
   */
  clearBrandSearch: () => void;
  
  // ======================================
  // ๐ ุฃูุนุงู ุฃููุงุน ุงูุนููุฏ
  // ======================================
  
  /**
   * ุฌูุจ ุฃููุงุน ุงูุนููุฏ ูููุตูุฑูู
   */
  loadContractTypes: () => Promise<void>;
  
  /**
   * ุงุฎุชูุงุฑ ููุน ุนูุฏ
   */
  selectContractType: (contractType: ContractType) => void;
  
  // ======================================
  // โณ ุฃูุนุงู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ (ููุฃุฏูู)
  // ======================================
  
  /**
   * ุฌูุจ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
   */
  loadPendingApplications: (options?: Partial<PendingApplicationsState['filters']>) => Promise<void>;
  
  /**
   * ุงูููุงููุฉ ุนูู ุทูุจ
   */
  approveApplication: (applicationId: ID, notes?: string) => Promise<ApplicationActionResult>;
  
  /**
   * ุฑูุถ ุทูุจ
   */
  rejectApplication: (applicationId: ID, reason: string, notes?: string) => Promise<ApplicationActionResult>;
  
  // ======================================
  // ๐ ุฃูุนุงู ุงูุฅุญุตุงุฆูุงุช
  // ======================================
  
  /**
   * ุฌูุจ ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
   */
  loadRoleStats: (dateRange?: { startDate: FirebaseTimestamp; endDate: FirebaseTimestamp }) => Promise<void>;
  
  /**
   * ุชุญุฏูุซ ูุทุงู ุชุงุฑูุฎ ุงูุฅุญุตุงุฆูุงุช
   */
  updateStatsDateRange: (dateRange: { startDate: FirebaseTimestamp; endDate: FirebaseTimestamp }) => void;
  
  // ======================================
  // ๐ค ุฃูุนุงู ุญุงูุฉ ุงููุณุชุฎุฏู
  // ======================================
  
  /**
   * ุฌูุจ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู
   */
  loadUserRoleStatus: (userId: ID) => Promise<void>;
  
  /**
   * ุชุญุฏูุซ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ูุญููุงู
   */
  updateUserRoleStatus: (status: Partial<UserRoleStatus>) => void;
  
  // ======================================
  // ๐ง ุฃูุนุงู ูุณุงุนุฏุฉ
  // ======================================
  
  /**
   * ูุณุญ ุฌููุน ุงูุฃุฎุทุงุก
   */
  clearAllErrors: () => void;
  
  /**
   * ุฅุนุงุฏุฉ ุชุนููู ุงููุชุฌุฑ
   */
  resetStore: () => void;
  
  /**
   * ุชุญุฏูุซ ููุช ุขุฎุฑ ุชุญุฏูุซ ูุนูููุฉ ูุญุฏุฏุฉ
   */
  updateLastUpdated: (operation: keyof Pick<RoleSelectionState, 'submission' | 'brandSearch' | 'contractTypes' | 'pendingApplications' | 'stats' | 'userStatus'>) => void;
  
  // ======================================
  // ๐ง ุฏูุงู ูุณุงุนุฏุฉ ููุฃููุงุน ูุงูุชูุณูู
  // ======================================
  
  /**
   * ุงูุชุญูู ูู ุตุญุฉ ููุน ุงูุจุฑุงูุฏ - ูุณุชุฎุฏู BrandType
   */
  validateBrandType: (brandType: BrandType) => boolean;
  
  /**
   * ุงูุชุญูู ูู ุตุญุฉ ุญุงูุฉ ุงูุจุฑุงูุฏ - ูุณุชุฎุฏู BrandStatus
   */
  validateBrandStatus: (status: BrandStatus) => boolean;
  
  /**
   * ุงูุชุญูู ูู ุตุญุฉ ุงูุตูุงุนุฉ - ูุณุชุฎุฏู Industry
   */
  validateIndustry: (industry: Industry) => boolean;
  
  /**
   * ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงููุณุชุฎุฏู ููุนุฑุถ - ูุณุชุฎุฏู User
   */
  extractUserInfo: (user: User) => { displayName: string; contactInfo: string; roleText: string };
  
  /**
   * ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุญุณุจ ุงููุนุงููุฑ - ูุณุชุฎุฏู ุฌููุน ุฃููุงุน ุงูุจุฑุงูุฏ
   */
  filterBrands: (brands: Brand[], filters: { 
    brandType?: BrandType; 
    status?: BrandStatus; 
    industry?: Industry 
  }) => Brand[];
}

// ======================================
// ๐ช ูุชุฌุฑ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูุฑุฆูุณู
// ======================================

export const useRoleSelectionStore = create<RoleSelectionState>()(
  persist(
    (set, get) => ({
      
      // ======================================
      // ๐ ุงูุญุงูุฉ ุงูุฃูููุฉ
      // ======================================
      
      userRoleStatus: null,
      selectedRole: null,
      submissionData: null,
      
      // ุญุงูุงุช ุงูุนูููุงุช ุงูุฃูููุฉ
      submission: {
        loading: false,
        error: null,
        success: false,
      },
      
      brandSearch: {
        loading: false,
        error: null,
        success: false,
        results: [],
        searchQuery: '',
        filters: {},
        total: 0,
        hasSearched: false,
      },
      
      contractTypes: {
        loading: false,
        error: null,
        success: false,
        contractTypes: [],
      },
      
      pendingApplications: {
        loading: false,
        error: null,
        success: false,
        applications: [],
        total: 0,
        filters: {},
      },
      
      stats: {
        loading: false,
        error: null,
        success: false,
      },
      
      userStatus: {
        loading: false,
        error: null,
        success: false,
      },

      // ======================================
      // ๐ญ ุฃูุนุงู ุชูุฏูู ุงูุทูุจุงุช
      // ======================================

      /**
       * ุชุญุฏูุฏ ุงูุฏูุฑ ุงููุฑุงุฏ ุงูุชูุฏูู ูู
       */
      selectRole: (role: UserRole) => {
        console.log('๐ญ ุชุญุฏูุฏ ุฏูุฑ ููุชูุฏูู:', role);
        set({
          selectedRole: role,
          submissionData: role ? { selected_role: role } : null,
        });
      },

      /**
       * ุชุญุฏูุซ ุจูุงูุงุช ุงูุทูุจ
       */
      updateSubmissionData: (data: Partial<RoleSelectionSubmission>) => {
        const current = get().submissionData || {};
        console.log('๐ ุชุญุฏูุซ ุจูุงูุงุช ุงูุทูุจ:', data);
        
        set({
          submissionData: {
            ...current,
            ...data,
          },
        });
      },

      /**
       * ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ
       */
      submitRoleApplication: async (userId: ID, submission: RoleSelectionSubmission): Promise<RoleSubmissionResult> => {
        console.log('๐ค ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ ูููุณุชุฎุฏู:', userId);
        
        set((state) => ({
          submission: {
            ...state.submission,
            loading: true,
            error: null,
            success: false,
            validationErrors: undefined,
          },
        }));

        try {
          const result = await roleSelectionService.submitRoleSelection(userId, submission);
          
          if (result.success && result.role_selection) {
            set((state) => ({
              submission: {
                ...state.submission,
                loading: false,
                success: true,
                submittedApplication: result.role_selection,
                lastUpdated: new Date(),
              },
              // ุฅุนุงุฏุฉ ุชุนููู ุจูุงูุงุช ุงูุชูุฏูู ุจุนุฏ ุงููุฌุงุญ
              selectedRole: null,
              submissionData: null,
            }));
          } else {
            set((state) => ({
              submission: {
                ...state.submission,
                loading: false,
                error: result.message,
                validationErrors: result.validation_errors,
              },
            }));
          }
          
          return result;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุชูุฏูู ุงูุทูุจ';
          
          set((state) => ({
            submission: {
              ...state.submission,
              loading: false,
              error: errorMessage,
            },
          }));
          
          throw error;
        }
      },

      /**
       * ุฅุนุงุฏุฉ ุชุนููู ุจูุงูุงุช ุงูุทูุจ
       */
      resetSubmission: () => {
        console.log('๐ ุฅุนุงุฏุฉ ุชุนููู ุจูุงูุงุช ุงูุทูุจ');
        set({
          selectedRole: null,
          submissionData: null,
          submission: {
            loading: false,
            error: null,
            success: false,
          },
        });
      },

      // ======================================
      // ๐ข ุฃูุนุงู ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
      // ======================================

      /**
       * ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ููููุณููู
       */
      searchBrands: async (options: BrandSearchOptions = {}) => {
        console.log('๐ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช:', options);
        
        set((state) => ({
          brandSearch: {
            ...state.brandSearch,
            loading: true,
            error: null,
            filters: options,
            searchQuery: options.searchQuery || '',
          },
        }));

        try {
          const result: BrandSearchResult = await roleSelectionService.searchBrandsForCoordinator(options);
          
          set((state) => ({
            brandSearch: {
              ...state.brandSearch,
              loading: false,
              success: true,
              results: result.brands,
              total: result.total,
              hasSearched: true,
              lastUpdated: new Date(),
            },
          }));
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช';
          
          set((state) => ({
            brandSearch: {
              ...state.brandSearch,
              loading: false,
              error: errorMessage,
            },
          }));
        }
      },

      /**
       * ุชุญุฏูุซ ููุงุชุฑ ุงูุจุญุซ
       */
      updateSearchFilters: (filters: Partial<BrandSearchOptions>) => {
        console.log('๐ง ุชุญุฏูุซ ููุงุชุฑ ุงูุจุญุซ:', filters);
        
        set((state) => ({
          brandSearch: {
            ...state.brandSearch,
            filters: {
              ...state.brandSearch.filters,
              ...filters,
            },
          },
        }));
      },

      /**
       * ูุณุญ ูุชุงุฆุฌ ุงูุจุญุซ
       */
      clearBrandSearch: () => {
        console.log('๐๏ธ ูุณุญ ูุชุงุฆุฌ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช');
        
        set((state) => ({
          brandSearch: {
            ...state.brandSearch,
            results: [],
            searchQuery: '',
            filters: {},
            total: 0,
            hasSearched: false,
            error: null,
          },
        }));
      },

      // ======================================
      // ๐ ุฃูุนุงู ุฃููุงุน ุงูุนููุฏ
      // ======================================

      /**
       * ุฌูุจ ุฃููุงุน ุงูุนููุฏ ูููุตูุฑูู
       */
      loadContractTypes: async () => {
        console.log('๐ ุฌูุจ ุฃููุงุน ุงูุนููุฏ ูููุตูุฑูู');
        
        set((state) => ({
          contractTypes: {
            ...state.contractTypes,
            loading: true,
            error: null,
          },
        }));

        try {
          const result: ContractTypesResult = await roleSelectionService.getContractTypesForPhotographer();
          
          set((state) => ({
            contractTypes: {
              ...state.contractTypes,
              loading: false,
              success: true,
              contractTypes: result.contract_types,
              lastUpdated: new Date(),
            },
          }));
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุฌูุจ ุฃููุงุน ุงูุนููุฏ';
          
          set((state) => ({
            contractTypes: {
              ...state.contractTypes,
              loading: false,
              error: errorMessage,
            },
          }));
        }
      },

      /**
       * ุงุฎุชูุงุฑ ููุน ุนูุฏ
       */
      selectContractType: (contractType: ContractType) => {
        console.log('๐ ุงุฎุชูุงุฑ ููุน ุนูุฏ:', contractType);
        
        set((state) => ({
          contractTypes: {
            ...state.contractTypes,
            selectedType: contractType,
          },
          // ุชุญุฏูุซ ุจูุงูุงุช ุงูุทูุจ ุฃูุถุงู
          submissionData: state.submissionData ? {
            ...state.submissionData,
            additional_data: {
              ...state.submissionData.additional_data,
              contract_type: contractType,
            },
          } : { 
            selected_role: state.selectedRole || 'photographer',
            additional_data: { contract_type: contractType }
          },
        }));
      },

      // ======================================
      // โณ ุฃูุนุงู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ (ููุฃุฏูู)
      // ======================================

      /**
       * ุฌูุจ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
       */
      loadPendingApplications: async (options = {}) => {
        console.log('โณ ุฌูุจ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ:', options);
        
        set((state) => ({
          pendingApplications: {
            ...state.pendingApplications,
            loading: true,
            error: null,
            filters: { ...state.pendingApplications.filters, ...options },
          },
        }));

        try {
          const result: PendingApplicationsResult = await roleSelectionService.getPendingApplications(options);
          
          set((state) => ({
            pendingApplications: {
              ...state.pendingApplications,
              loading: false,
              success: true,
              applications: result.applications,
              total: result.total,
              lastUpdated: new Date(),
            },
          }));
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ';
          
          set((state) => ({
            pendingApplications: {
              ...state.pendingApplications,
              loading: false,
              error: errorMessage,
            },
          }));
        }
      },

      /**
       * ุงูููุงููุฉ ุนูู ุทูุจ
       */
      approveApplication: async (applicationId: ID, notes?: string): Promise<ApplicationActionResult> => {
        console.log('โ ุงูููุงููุฉ ุนูู ุทูุจ:', applicationId);
        
        try {
          const result: ApplicationActionResult = await roleSelectionService.approveRoleApplication(
            applicationId, 
            notes ? { admin_notes: notes } : {}
          );
          
          if (result.success && result.updated_application) {
            // ุชุญุฏูุซ ูุงุฆูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
            set((state) => ({
              pendingApplications: {
                ...state.pendingApplications,
                applications: state.pendingApplications.applications.filter(app => app.id !== applicationId),
                total: state.pendingApplications.total - 1,
              },
            }));
          }
          
          return result;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุงูููุงููุฉ ุนูู ุงูุทูุจ';
          throw new Error(errorMessage);
        }
      },

      /**
       * ุฑูุถ ุทูุจ
       */
      rejectApplication: async (applicationId: ID, reason: string, notes?: string): Promise<ApplicationActionResult> => {
        console.log('โ ุฑูุถ ุทูุจ:', applicationId, 'ุงูุณุจุจ:', reason);
        
        try {
          const result: ApplicationActionResult = await roleSelectionService.rejectRoleApplication(
            applicationId, 
            { rejection_reason: reason, admin_notes: notes }
          );
          
          if (result.success && result.updated_application) {
            // ุชุญุฏูุซ ูุงุฆูุฉ ุงูุทูุจุงุช ุงูููุชุธุฑุฉ
            set((state) => ({
              pendingApplications: {
                ...state.pendingApplications,
                applications: state.pendingApplications.applications.filter(app => app.id !== applicationId),
                total: state.pendingApplications.total - 1,
              },
            }));
          }
          
          return result;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุฑูุถ ุงูุทูุจ';
          throw new Error(errorMessage);
        }
      },

      // ======================================
      // ๐ ุฃูุนุงู ุงูุฅุญุตุงุฆูุงุช
      // ======================================

      /**
       * ุฌูุจ ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
       */
      loadRoleStats: async (dateRange?: { startDate: FirebaseTimestamp; endDate: FirebaseTimestamp }) => {
        console.log('๐ ุฌูุจ ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ:', dateRange);
        
        set((state) => ({
          stats: {
            ...state.stats,
            loading: true,
            error: null,
            dateRange,
          },
        }));

        try {
          const result: RoleStatsResult = await roleSelectionService.getRoleSelectionStats(dateRange);
          
          set((state) => ({
            stats: {
              ...state.stats,
              loading: false,
              success: true,
              stats: result.stats,
              lastUpdated: new Date(),
            },
          }));
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช';
          
          set((state) => ({
            stats: {
              ...state.stats,
              loading: false,
              error: errorMessage,
            },
          }));
        }
      },

      /**
       * ุชุญุฏูุซ ูุทุงู ุชุงุฑูุฎ ุงูุฅุญุตุงุฆูุงุช
       */
      updateStatsDateRange: (dateRange: { startDate: FirebaseTimestamp; endDate: FirebaseTimestamp }) => {
        console.log('๐ ุชุญุฏูุซ ูุทุงู ุชุงุฑูุฎ ุงูุฅุญุตุงุฆูุงุช:', dateRange);
        
        set((state) => ({
          stats: {
            ...state.stats,
            dateRange,
          },
        }));
      },

      // ======================================
      // ๐ค ุฃูุนุงู ุญุงูุฉ ุงููุณุชุฎุฏู
      // ======================================

      /**
       * ุฌูุจ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู
       */
      loadUserRoleStatus: async (userId: ID) => {
        console.log('๐ค ุฌูุจ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู:', userId);
        
        set((state) => ({
          userStatus: {
            ...state.userStatus,
            loading: true,
            error: null,
          },
        }));

        try {
          const result = await roleSelectionService.getUserRoleStatus(userId);
          
          set((state) => ({
            userRoleStatus: result.status,
            userStatus: {
              ...state.userStatus,
              loading: false,
              success: true,
              lastUpdated: new Date(),
            },
          }));
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'ุฎุทุฃ ูู ุฌูุจ ุญุงูุฉ ุงููุณุชุฎุฏู';
          
          set((state) => ({
            userStatus: {
              ...state.userStatus,
              loading: false,
              error: errorMessage,
            },
          }));
        }
      },

      /**
       * ุชุญุฏูุซ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ูุญููุงู
       */
      updateUserRoleStatus: (status: Partial<UserRoleStatus>) => {
        console.log('๐ ุชุญุฏูุซ ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ูุญููุงู:', status);
        
        set((state) => ({
          userRoleStatus: state.userRoleStatus ? {
            ...state.userRoleStatus,
            ...status,
          } : null,
        }));
      },

      // ======================================
      // ๐ง ุฃูุนุงู ูุณุงุนุฏุฉ
      // ======================================

      /**
       * ูุณุญ ุฌููุน ุงูุฃุฎุทุงุก
       */
      clearAllErrors: () => {
        console.log('๐๏ธ ูุณุญ ุฌููุน ุงูุฃุฎุทุงุก');
        
        set((state) => ({
          submission: { ...state.submission, error: null },
          brandSearch: { ...state.brandSearch, error: null },
          contractTypes: { ...state.contractTypes, error: null },
          pendingApplications: { ...state.pendingApplications, error: null },
          stats: { ...state.stats, error: null },
          userStatus: { ...state.userStatus, error: null },
        }));
      },

      /**
       * ุฅุนุงุฏุฉ ุชุนููู ุงููุชุฌุฑ
       */
      resetStore: () => {
        console.log('๐ ุฅุนุงุฏุฉ ุชุนููู ูุชุฌุฑ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ');
        
        set({
          userRoleStatus: null,
          selectedRole: null,
          submissionData: null,
          submission: { loading: false, error: null, success: false },
          brandSearch: { 
            loading: false, error: null, success: false, 
            results: [], searchQuery: '', filters: {}, total: 0, hasSearched: false 
          },
          contractTypes: { loading: false, error: null, success: false, contractTypes: [] },
          pendingApplications: { 
            loading: false, error: null, success: false, 
            applications: [], total: 0, filters: {} 
          },
          stats: { loading: false, error: null, success: false },
          userStatus: { loading: false, error: null, success: false },
        });
      },

      /**
       * ุชุญุฏูุซ ููุช ุขุฎุฑ ุชุญุฏูุซ ูุนูููุฉ ูุญุฏุฏุฉ
       */
      updateLastUpdated: (operation) => {
        console.log('โฐ ุชุญุฏูุซ ููุช ุขุฎุฑ ุชุญุฏูุซ ููุนูููุฉ:', operation);
        
        set((state) => ({
          [operation]: {
            ...state[operation],
            lastUpdated: new Date(),
          },
        }));
      },

      // ======================================
      // ๐ง ุฏูุงู ูุณุงุนุฏุฉ ููุฃููุงุน ูุงูุชูุณูู
      // ======================================

      /**
       * ุงูุชุญูู ูู ุตุญุฉ ููุน ุงูุจุฑุงูุฏ - ูุณุชุฎุฏู BrandType
       */
      validateBrandType: (brandType: BrandType): boolean => {
        const validTypes: BrandType[] = ['local', 'international', 'startup', 'enterprise'];
        return validTypes.includes(brandType);
      },

      /**
       * ุงูุชุญูู ูู ุตุญุฉ ุญุงูุฉ ุงูุจุฑุงูุฏ - ูุณุชุฎุฏู BrandStatus
       */
      validateBrandStatus: (status: BrandStatus): boolean => {
        const validStatuses: BrandStatus[] = ['active', 'paused', 'archived', 'development'];
        return validStatuses.includes(status);
      },

      /**
       * ุงูุชุญูู ูู ุตุญุฉ ุงูุตูุงุนุฉ - ูุณุชุฎุฏู Industry
       */
      validateIndustry: (industry: Industry): boolean => {
        const validIndustries: Industry[] = [
          'fashion', 'food', 'technology', 'healthcare', 'education',
          'automotive', 'real_estate', 'travel', 'beauty', 'other'
        ];
        return validIndustries.includes(industry);
      },

      /**
       * ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงููุณุชุฎุฏู ููุนุฑุถ - ูุณุชุฎุฏู User
       */
      extractUserInfo: (user: User) => {
        const roleNames: Record<UserRole, string> = {
          super_admin: 'ูุฏูุฑ ุนุงู',
          marketing_coordinator: 'ููุณู ุชุณููู',
          brand_coordinator: 'ููุณู ุจุฑุงูุฏ',
          photographer: 'ูุตูุฑ',
          new_user: 'ูุณุชุฎุฏู ุฌุฏูุฏ'
        };
        
        return {
          displayName: user.display_name || user.full_name || 'ุบูุฑ ูุญุฏุฏ',
          contactInfo: user.email || user.phone || 'ุบูุฑ ูุชููุฑ',
          roleText: roleNames[user.role] || user.role
        };
      },

      /**
       * ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุญุณุจ ุงููุนุงููุฑ - ูุณุชุฎุฏู ุฌููุน ุฃููุงุน ุงูุจุฑุงูุฏ
       */
      filterBrands: (brands: Brand[], filters) => {
        return brands.filter(brand => {
          // ููุชุฑุฉ ุญุณุจ ููุน ุงูุจุฑุงูุฏ
          if (filters.brandType && brand.brand_type !== filters.brandType) {
            return false;
          }
          
          // ููุชุฑุฉ ุญุณุจ ุญุงูุฉ ุงูุจุฑุงูุฏ
          if (filters.status && brand.status !== filters.status) {
            return false;
          }
          
          // ููุชุฑุฉ ุญุณุจ ุงูุตูุงุนุฉ
          if (filters.industry && brand.industry !== filters.industry) {
            return false;
          }
          
          return true;
        });
      },

    }),
    {
      name: 'role-selection-store',         // ุงุณู ุงูููุชุงุญ ูู localStorage
      storage: createJSONStorage(() => localStorage), // ุงุณุชุฎุฏุงู localStorage
      
      // ุชุญุฏูุฏ ุงูุญููู ุงููุฑุงุฏ ุญูุธูุง (ุชุฌูุจ ุญูุธ ุงูุนูููุงุช ุงููุคูุชุฉ)
      partialize: (state) => ({
        userRoleStatus: state.userRoleStatus,
        selectedRole: state.selectedRole,
        submissionData: state.submissionData,
        brandSearch: {
          results: state.brandSearch.results,
          searchQuery: state.brandSearch.searchQuery,
          filters: state.brandSearch.filters,
          total: state.brandSearch.total,
          hasSearched: state.brandSearch.hasSearched,
        },
        contractTypes: {
          contractTypes: state.contractTypes.contractTypes,
          selectedType: state.contractTypes.selectedType,
        },
      }),
    }
  )
);

// ======================================
// ๐ Hooks ูุณุงุนุฏุฉ ููุงุณุชุฎุฏุงู ุงูุณูู
// ======================================

/**
 * Hook ููุญุตูู ุนูู ุญุงูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูุฃุณุงุณูุฉ
 */
export const useRoleSelection = () => {
  const store = useRoleSelectionStore();
  return {
    userRoleStatus: store.userRoleStatus,
    selectedRole: store.selectedRole,
    submissionData: store.submissionData,
    isLoading: store.submission.loading || store.userStatus.loading,
    error: store.submission.error || store.userStatus.error,
    hasSubmitted: store.submission.success,
  };
};

/**
 * Hook ููุญุตูู ุนูู ุฃูุนุงู ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
 */
export const useRoleSelectionActions = () => {
  const store = useRoleSelectionStore();
  return {
    selectRole: store.selectRole,
    updateSubmissionData: store.updateSubmissionData,
    submitRoleApplication: store.submitRoleApplication,
    resetSubmission: store.resetSubmission,
    loadUserRoleStatus: store.loadUserRoleStatus,
    clearAllErrors: store.clearAllErrors,
  };
};

/**
 * Hook ููุญุตูู ุนูู ุฃูุนุงู ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช
 */
export const useBrandSearch = () => {
  const store = useRoleSelectionStore();
  return {
    searchState: store.brandSearch,
    searchBrands: store.searchBrands,
    updateSearchFilters: store.updateSearchFilters,
    clearBrandSearch: store.clearBrandSearch,
  };
};

/**
 * Hook ููุญุตูู ุนูู ุฃูุนุงู ุฃููุงุน ุงูุนููุฏ
 */
export const useContractTypes = () => {
  const store = useRoleSelectionStore();
  return {
    contractTypesState: store.contractTypes,
    loadContractTypes: store.loadContractTypes,
    selectContractType: store.selectContractType,
  };
};

/**
 * Hook ููุญุตูู ุนูู ุฃูุนุงู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ (ููุฃุฏูู)
 */
export const usePendingApplications = () => {
  const store = useRoleSelectionStore();
  return {
    pendingState: store.pendingApplications,
    loadPendingApplications: store.loadPendingApplications,
    approveApplication: store.approveApplication,
    rejectApplication: store.rejectApplication,
  };
};

/**
 * Hook ููุญุตูู ุนูู ุฃูุนุงู ุงูุฅุญุตุงุฆูุงุช
 */
export const useRoleStats = () => {
  const store = useRoleSelectionStore();
  return {
    statsState: store.stats,
    loadRoleStats: store.loadRoleStats,
    updateStatsDateRange: store.updateStatsDateRange,
  };
};

/**
 * Hook ุดุงูู ููุฃุฏูู (ุฌููุน ุงูุนูููุงุช ุงูุฅุฏุงุฑูุฉ)
 */
export const useRoleSelectionAdmin = () => {
  const store = useRoleSelectionStore();
  return {
    // ุญุงูุงุช ุงูุจูุงูุงุช
    pendingApplications: store.pendingApplications.applications,
    stats: store.stats.stats,
    isLoading: store.pendingApplications.loading || store.stats.loading,
    error: store.pendingApplications.error || store.stats.error,
    
    // ุงูุฃูุนุงู
    loadPendingApplications: store.loadPendingApplications,
    approveApplication: store.approveApplication,
    rejectApplication: store.rejectApplication,
    loadRoleStats: store.loadRoleStats,
    clearAllErrors: store.clearAllErrors,
  };
}; 