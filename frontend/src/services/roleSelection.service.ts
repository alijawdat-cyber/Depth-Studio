/**
 * ๐ญ ุฎุฏูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ - Depth Studio Frontend
 * ==============================================
 * 
 * ๐ ูุญุฏุซ: ููููู 2025
 * ๐จโ๐ป ุงููุทูุฑ: ุนูู ุฌูุฏุช
 * ๐ฏ ุงููุฏู: ุฅุฏุงุฑุฉ ุนูููุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ูู ุงููุฑููุช ุฅูุฏ ุจุงููุงูู
 * 
 * ๐ญ ุงูุฃุฏูุงุฑ ุงููุฏุนููุฉ:
 * - ููุณู ุงูุชุณููู (marketing_coordinator)
 * - ููุณู ุงูุจุฑุงูุฏ (brand_coordinator) 
 * - ูุตูุฑ (photographer)
 * 
 * ๐ ุงููููุฒุงุช ุงูุฑุฆูุณูุฉ:
 * - ุชูุฏูู ุทูุจุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ูุน validation ุดุงูู
 * - ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ุงููุชุงุญุฉ ูููุณูู ุงูุจุฑุงูุฏ
 * - ุนุฑุถ ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ ูููุตูุฑูู
 * - ูุชุงุจุนุฉ ุญุงูุฉ ุงูุทูุจุงุช ุงูููุฏูุฉ
 * - ุฅุญุตุงุฆูุงุช ุดุงููุฉ ูุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
 * - ุชูุงูู ูุงูู ูุน Backend RoleSelectionService (906 ุณุทุฑ)
 * 
 * ๐ APIs ุงููุฑุจูุทุฉ (8 endpoints ูุชูุงููุฉ ูุน Backend):
 * - submitRoleSelection: POST /api/roles/:user_id/select
 * - getBrandsList: GET /api/roles/brands/search
 * - getContractTypes: GET /api/roles/photographer/contract-types
 * - getPendingApplications: GET /api/roles/pending-applications
 * - approveApplication: PATCH /api/roles/applications/:id/approve
 * - rejectApplication: PATCH /api/roles/applications/:id/reject
 * - getSelectionStats: GET /api/roles/selection-stats
 * - getRoleStatus: GET /api/roles/user/:userId/status
 */

import { apiClient } from './api/api-client';

// ======================================
// ๐ฆ ุงุณุชูุฑุงุฏุงุช ุงูุฃููุงุน ูู @depth-studio/types
// ======================================

import {
  // ๐ญ ุฃููุงุน ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ - ุงูุฃุณุงุณูุฉ ูุนูู ุงูุฎุฏูุฉ
  RoleSelection,                    // ๐ ููุซู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ ูุน ุฌููุน ุจูุงูุงุชู (user_id, selected_role, status, etc.)
  RoleSelectionSubmission,          // ๐ ุจูุงูุงุช ุชูุฏูู ุทูุจ ุฌุฏูุฏ (selected_role + additional_data ูููุตูุฑ/ููุณู)
  RoleSelectionStats,               // ๐ ุฅุญุตุงุฆูุงุช ุดุงููุฉ ูุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ (ุนุฏุฏ ุงูุทูุจุงุชุ ูุณุจ ุงูููุงููุฉุ etc.)
  
  // ๐ฅ ุฃููุงุน ุงููุณุชุฎุฏููู ูุงูุจุฑุงูุฏุงุช - ููุชุนุงูู ูุน ุจูุงูุงุช ุงููุณุชุฎุฏููู ูุงูุจุฑุงูุฏุงุช
  User,                             // ๐ค ููุน ุงููุณุชุฎุฏู ุงููุงูู - ููุณุชุฎุฏู ูู UserRoleStatus ู ุชูุงุตูู ุงููุชูุฏููู
  Brand,                            // ๐ข ููุน ุงูุจุฑุงูุฏ ุงููุงูู - ููุจุญุซ ูุนุฑุถ ุงูุจุฑุงูุฏุงุช ููููุณููู
  ID,                               // ๐ ููุน ุงููุนุฑู ุงูููุญุฏ - ูุฌููุน ูุนุฑูุงุช ุงููุณุชุฎุฏููู ูุงูุทูุจุงุช ูุงูุจุฑุงูุฏุงุช
  
  // ๐ฏ ุงูุชุนุฏุงุฏุงุช ุงููุทููุจุฉ - ูููู ุฃููุงุน ุงูุฃุฏูุงุฑ ูุงูุนููุฏ ูุงูุจุฑุงูุฏุงุช
  UserRole,                         // ๐ญ ุฃุฏูุงุฑ ุงููุณุชุฎุฏููู (photographer, brand_coordinator, marketing_coordinator)
  ContractType,                     // ๐ ุฃููุงุน ุนููุฏ ุงููุตูุฑูู (freelancer, salary)
  BrandType,                        // ๐ข ุฃููุงุน ุงูุจุฑุงูุฏุงุช (local, international, startup, enterprise)
  BrandStatus,                      // ๐ ุญุงูุงุช ุงูุจุฑุงูุฏุงุช (active, paused, archived, development)
  Industry,                         // ๐ญ ุงูุตูุงุนุงุช (fashion, food, technology, etc.)
  
  // โฐ ุฃููุงุน ุงูุทูุงุจุน ุงูุฒูููุฉ - ูุฅุฏุงุฑุฉ ุงูุชูุงุฑูุฎ ูุงูุฃููุงุช
  FirebaseTimestamp                 // ๐ ุทูุงุจุน ุฒูููุฉ Firebase - ููุชุนุงูู ูุน ุชูุงุฑูุฎ ุงูุชูุฏูู ูุงูููุงููุฉ
} from '@depth-studio/types';

// ======================================
// ๐ญ ูุงุฌูุงุช ุฎุงุตุฉ ุจุฎุฏูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
// ======================================

/** ุฎูุงุฑุงุช ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ูููุณูู ุงูุจุฑุงูุฏ */
export interface BrandSearchOptions {
  searchQuery?: string;                  // ูุต ุงูุจุญุซ ูู ุงุณู ุงูุจุฑุงูุฏ
  brand_type?: BrandType;                // ููุน ุงูุจุฑุงูุฏ ููููุชุฑุฉ
  industry?: Industry;                   // ุงูุตูุงุนุฉ ููููุชุฑุฉ
  status?: BrandStatus;                  // ุญุงูุฉ ุงูุจุฑุงูุฏ ููููุชุฑุฉ
  has_coordinator?: boolean;             // ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุงูุชู ูุฏููุง/ููุณ ูุฏููุง ููุณู
  limit?: number;                        // ุนุฏุฏ ุงููุชุงุฆุฌ ุงููุทููุจุฉ
}

/** ูุชูุฌุฉ ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช */
export interface BrandSearchResult {
  brands: Brand[];                       // ูุงุฆูุฉ ุงูุจุฑุงูุฏุงุช ุงููุทุงุจูุฉ ููุจุญุซ
  total: number;                         // ุงูุนุฏุฏ ุงูุฅุฌูุงูู ูููุชุงุฆุฌ
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ ูููุชูุฌุฉ
}

/** ูุนูููุงุช ุฃููุงุน ุงูุนููุฏ ูููุตูุฑูู */
export interface ContractTypeInfo {
  type: ContractType;                    // ููุน ุงูุนูุฏ (freelancer ุฃู salary)
  name_ar: string;                       // ุงูุงุณู ุจุงูุนุฑุจูุฉ
  name_en: string;                       // ุงูุงุณู ุจุงูุฅูุฌููุฒูุฉ
  description: string;                   // ูุตู ุงูุนูุฏ ููุชุทูุจุงุชู
  benefits: string[];                    // ูุงุฆูุฉ ุงููุฒุงูุง ููุฐุง ุงูููุน ูู ุงูุนูุฏ
}

/** ูุชูุฌุฉ ุงูุญุตูู ุนูู ุฃููุงุน ุงูุนููุฏ */
export interface ContractTypesResult {
  contract_types: ContractTypeInfo[];    // ูุงุฆูุฉ ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ
}

/** ุฎูุงุฑุงุช ุงูุญุตูู ุนูู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ */
export interface PendingApplicationsOptions {
  role?: UserRole;                       // ููุชุฑุฉ ุญุณุจ ุงูุฏูุฑ ุงููุทููุจ
  limit?: number;                        // ุนุฏุฏ ุงููุชุงุฆุฌ ุงููุทููุจุฉ
  orderBy?: 'applied_at' | 'updated_at'; // ุชุฑุชูุจ ุญุณุจ ุชุงุฑูุฎ ุงูุชูุฏูู ุฃู ุงูุชุญุฏูุซ
  orderDirection?: 'asc' | 'desc';       // ุงุชุฌุงู ุงูุชุฑุชูุจ (ุชุตุงุนุฏู ุฃู ุชูุงุฒูู)
}

/** ูุชูุฌุฉ ุงูุญุตูู ุนูู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ */
export interface PendingApplicationsResult {
  applications: RoleSelection[];         // ูุงุฆูุฉ ุทูุจุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูููุชุธุฑุฉ
  total: number;                         // ุงูุนุฏุฏ ุงูุฅุฌูุงูู ููุทูุจุงุช
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ
}

/** ุฎูุงุฑุงุช ููุงููุฉ ุนูู ุทูุจ */
export interface ApprovalOptions {
  admin_notes?: string;                  // ููุงุญุธุงุช ุงูุฃุฏูู ุนูู ุงูููุงููุฉ
}

/** ุฎูุงุฑุงุช ุฑูุถ ุทูุจ */
export interface RejectionOptions {
  rejection_reason: string;              // ุณุจุจ ุงูุฑูุถ (ูุทููุจ)
  admin_notes?: string;                  // ููุงุญุธุงุช ุฅุถุงููุฉ ูู ุงูุฃุฏูู
}

/** ูุชูุฌุฉ ุนูููุฉ ุงูููุงููุฉ ุฃู ุงูุฑูุถ */
export interface ApplicationActionResult {
  success: boolean;                      // ูู ุงูุนูููุฉ ูุฌุญุช
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ ูููุชูุฌุฉ
  updated_application?: RoleSelection;   // ุงูุทูุจ ุงููุญุฏุซ ุจุนุฏ ุงูุนูููุฉ
}

/** ูุชูุฌุฉ ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ */
export interface RoleStatsResult {
  stats: RoleSelectionStats;             // ุงูุฅุญุตุงุฆูุงุช ุงูุดุงููุฉ
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ
}

/** ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู ุงูุดุงููุฉ */
export interface UserRoleStatus {
  user_id: ID;                           // ูุนุฑู ุงููุณุชุฎุฏู
  user: User;                            // ๐ค ุจูุงูุงุช ุงููุณุชุฎุฏู ุงููุงููุฉ (ุงูุงุณูุ ุงูุจุฑูุฏุ ุงููุงุชูุ etc.)
  current_role: UserRole;                // ุงูุฏูุฑ ุงูุญุงูู ูููุณุชุฎุฏู
  has_pending_application: boolean;      // ูู ูุฏูู ุทูุจ ููุชุธุฑ ููููุงููุฉ
  pending_application?: RoleSelection;   // ุงูุทูุจ ุงูููุชุธุฑ (ุฅู ูุฌุฏ)
  role_selection_history: RoleSelection[]; // ุชุงุฑูุฎ ุฌููุน ุทูุจุงุช ุงูุฃุฏูุงุฑ ุงูุณุงุจูุฉ
  last_application_date?: FirebaseTimestamp; // ุชุงุฑูุฎ ุขุฎุฑ ุทูุจ ูุฏูู
  approval_rate: number;                 // ูุนุฏู ุงูููุงููุฉ ุนูู ุทูุจุงุชู (ูุณุจุฉ ูุฆููุฉ)
  total_applications: number;            // ุฅุฌูุงูู ุนุฏุฏ ุงูุทูุจุงุช ุงูููุฏูุฉ
  approved_applications: number;         // ุนุฏุฏ ุงูุทูุจุงุช ุงูููุจููุฉ
  rejected_applications: number;         // ุนุฏุฏ ุงูุทูุจุงุช ุงููุฑููุถุฉ
}

/** ูุชูุฌุฉ ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ */
export interface RoleSubmissionResult {
  success: boolean;                      // ูู ุงูุนูููุฉ ูุฌุญุช
  role_selection?: RoleSelection;        // ุจูุงูุงุช ุงูุทูุจ ุงูููุฏู (ุฅุฐุง ูุฌุญ)
  message: string;                       // ุฑุณุงูุฉ ุชูุถูุญูุฉ ูููุชูุฌุฉ
  validation_errors?: string[];          // ูุงุฆูุฉ ุฃุฎุทุงุก ุงูุชุญูู (ุฅู ูุฌุฏุช)
}

/** ุฅุญุตุงุฆูุงุช ูุชูุฏูุฉ ููุฃุฏูุงุฑ */
export interface AdvancedRoleStats {
  stats: RoleSelectionStats;             // ุงูุฅุญุตุงุฆูุงุช ุงูุฃุณุงุณูุฉ
  trends: {                              // ุงุชุฌุงูุงุช ุงูุทูุจุงุช
    weekly_applications: number[];       // ุนุฏุฏ ุงูุทูุจุงุช ุงูุฃุณุจูุนูุฉ
    monthly_approvals: number[];         // ุนุฏุฏ ุงูููุงููุงุช ุงูุดูุฑูุฉ
    popular_roles: Array<{               // ุงูุฃุฏูุงุฑ ุงูุฃูุซุฑ ุทูุจุงู
      role: UserRole;
      count: number;
      percentage: number;
    }>;
  };
  performance: {                         // ุฃุฏุงุก ุงููุธุงู
    average_response_time_hours: number; // ูุชูุณุท ููุช ุงูุงุณุชุฌุงุจุฉ
    fastest_approval_hours: number;      // ุฃุณุฑุน ููุงููุฉ
    slowest_approval_hours: number;      // ุฃุจุทุฃ ููุงููุฉ
  };
}

// ======================================
// ๐ญ ุฎุฏูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ุงูุฑุฆูุณูุฉ
// ======================================

/**
 * ุฎุฏูุฉ ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ - ูุชูุงููุฉ ูุน Backend RoleSelectionService
 * 
 * ุชุฏูุฑ ุฌููุน ุนูููุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ ูู ุงููุธุงู:
 * - ุชูุฏูู ุทูุจุงุช ุงูุฃุฏูุงุฑ ูุน ุงูุชุญูู ุงููุณุจู
 * - ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ููููุณููู
 * - ุฅุฏุงุฑุฉ ุฃููุงุน ุงูุนููุฏ ูููุตูุฑูู
 * - ูุชุงุจุนุฉ ุงูุทูุจุงุช ูุงูููุงููุงุช
 * - ุฅุญุตุงุฆูุงุช ุดุงููุฉ ููุฃุฏูุงุฑ
 * 
 * ๐ ูุชูุงููุฉ 100% ูุน Backend RoleSelectionService (906 ุณุทุฑ)
 */
export class RoleSelectionService {
  
  // ุงูุฃุฏูุงุฑ ุงููุณููุญุฉ ููุงุฎุชูุงุฑ (ูุชุทุงุจูุฉ ูุน Backend)
  private readonly allowedRoles: UserRole[] = [
    'marketing_coordinator',
    'brand_coordinator', 
    'photographer'
  ];

  // ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ ูููุตูุฑูู (ูุชุทุงุจูุฉ ูุน Backend)
  private readonly contractTypes: ContractType[] = [
    'freelancer',
    'salary'
  ];

  // ======================================
  // ๐ ุชูุฏูู ุทูุจุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
  // ======================================

  /**
   * ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ ุฌุฏูุฏ
   * ๐ ูุชูุงูู ูุน: POST /api/roles/:user_id/select
   * 
   * ูุณุชูุจู ูุนุฑู ุงููุณุชุฎุฏู ูุจูุงูุงุช ุงูุทูุจุ ูุชุญูู ูู ุตุญุชูุงุ
   * ุซู ูุฑุณููุง ููุจุงู ุฅูุฏ ูุญูุธูุง ููุนุงูุฌุชูุง
   */
  async submitRoleSelection(
    userId: ID, 
    submission: RoleSelectionSubmission
  ): Promise<RoleSubmissionResult> {
    try {
      // ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ูุจู ุงูุฅุฑุณุงู ููุจุงู ุฅูุฏ
      const validationResult = this.validateRoleSubmission(submission);
      if (!validationResult.isValid) {
        return {
          success: false,
          message: 'ุจูุงูุงุช ุงูุทูุจ ุบูุฑ ุตุญูุญุฉ',
          validation_errors: validationResult.errors
        };
      }

      // ุฅุฑุณุงู ุงูุทูุจ ููุจุงู ุฅูุฏ ูุน ูุนุฑู ุงููุณุชุฎุฏู ูู URL
      const response = await apiClient.post<RoleSubmissionResult>(
        `/api/roles/${userId}/select`,
        submission
      );

      if (response.data.success) {
        return {
          success: true,
          role_selection: response.data.role_selection,
          message: response.data.message || 'ุชู ุชูุฏูู ุทูุจู ุจูุฌุงุญ ููู ููุฏ ุงููุฑุงุฌุนุฉ'
        };
      } else {
        return {
          success: false,
          message: response.data.message || 'ุฎุทุฃ ูู ุชูุฏูู ุงูุทูุจ'
        };
      }

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชูุฏูู ุทูุจ ุงุฎุชูุงุฑ ุงูุฏูุฑ:', error);
      return {
        success: false,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูุฏูู ุงูุทูุจุ ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู'
      };
    }
  }

  /**
   * ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช ุงููุชุงุญุฉ ูููุณูู ุงูุจุฑุงูุฏ
   * ๐ ูุชูุงูู ูุน: GET /api/roles/brands/search
   * 
   * ูุจุญุซ ูู ุงูุจุฑุงูุฏุงุช ุงููุชุงุญุฉ ุญุณุจ ุงููุนุงููุฑ ุงููุทููุจุฉ
   * ููุนูุฏ ูุงุฆูุฉ Brand[] ููุงุฎุชูุงุฑ ูู ุจูููุง
   */
  async searchBrandsForCoordinator(options: BrandSearchOptions = {}): Promise<BrandSearchResult> {
    try {
      // ุฅุนุฏุงุฏ ูุนุงููุงุช ุงูุจุญุซ ููุฅุฑุณุงู ูุน ุงูุทูุจ
      const searchParams = new URLSearchParams();
      
      if (options.searchQuery) {
        searchParams.append('q', options.searchQuery);
      }
      if (options.brand_type) {
        searchParams.append('brand_type', options.brand_type);
      }
      if (options.industry) {
        searchParams.append('industry', options.industry);
      }
      if (options.status) {
        searchParams.append('status', options.status);
      }
      if (options.has_coordinator !== undefined) {
        searchParams.append('has_coordinator', options.has_coordinator.toString());
      }
      if (options.limit) {
        searchParams.append('limit', options.limit.toString());
      }

      // ุฅุฑุณุงู ุทูุจ ุงูุจุญุซ ููุจุงู ุฅูุฏ
      const response = await apiClient.get<BrandSearchResult>(
        `/api/roles/brands/search?${searchParams.toString()}`
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช:', error);
      return {
        brands: [],
        total: 0,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ ุนู ุงูุจุฑุงูุฏุงุช'
      };
    }
  }

  /**
   * ุงูุญุตูู ุนูู ุฃููุงุน ุงูุนููุฏ ุงููุชุงุญุฉ ูููุตูุฑูู
   * ๐ ูุชูุงูู ูุน: GET /api/roles/photographer/contract-types
   * 
   * ูุนูุฏ ูุงุฆูุฉ ContractTypeInfo[] ูุน ุชูุงุตูู ูู ููุน ุนูุฏ
   * (freelancer vs salary) ูุน ุงููุฒุงูุง ูุงูุฃูุตุงู
   */
  async getContractTypesForPhotographer(): Promise<ContractTypesResult> {
    try {
      const response = await apiClient.get<ContractTypesResult>(
        '/api/roles/photographer/contract-types'
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฃููุงุน ุงูุนููุฏ:', error);
      return {
        contract_types: [],
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุฃููุงุน ุงูุนููุฏ'
      };
    }
  }

  // ======================================
  // ๐ ุฅุฏุงุฑุฉ ุงูุทูุจุงุช (ููุฃุฏููุฒ)
  // ======================================

  /**
   * ุงูุญุตูู ุนูู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ ููููุงููุฉ
   * ๐ ูุชูุงูู ูุน: GET /api/roles/pending-applications
   * 
   * ูุนูุฏ ูุงุฆูุฉ RoleSelection[] ููุทูุจุงุช ุงูููุชุธุฑุฉ ูุน ุฅููุงููุฉ ุงูููุชุฑุฉ ูุงูุชุฑุชูุจ
   */
  async getPendingApplications(options: PendingApplicationsOptions = {}): Promise<PendingApplicationsResult> {
    try {
      const searchParams = new URLSearchParams();
      
      if (options.role) {
        searchParams.append('role', options.role);
      }
      if (options.limit) {
        searchParams.append('limit', options.limit.toString());
      }
      if (options.orderBy) {
        searchParams.append('orderBy', options.orderBy);
      }
      if (options.orderDirection) {
        searchParams.append('orderDirection', options.orderDirection);
      }

      const response = await apiClient.get<PendingApplicationsResult>(
        `/api/roles/pending-applications?${searchParams.toString()}`
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ:', error);
      return {
        applications: [],
        total: 0,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุงูุทูุจุงุช ุงูููุชุธุฑุฉ'
      };
    }
  }

  /**
   * ุงูููุงููุฉ ุนูู ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ
   * ๐ ูุชูุงูู ูุน: PATCH /api/roles/applications/:id/approve
   * 
   * ููุงูู ุนูู ุทูุจ ูุนูู ููุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู
   */
  async approveRoleApplication(
    applicationId: ID,
    options: ApprovalOptions = {}
  ): Promise<ApplicationActionResult> {
    try {
      const response = await apiClient.patch<ApplicationActionResult>(
        `/api/roles/applications/${applicationId}/approve`,
        options
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูููุงููุฉ ุนูู ุงูุทูุจ:', error);
      return {
        success: false,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูููุงููุฉ ุนูู ุงูุทูุจ'
      };
    }
  }

  /**
   * ุฑูุถ ุทูุจ ุงุฎุชูุงุฑ ุฏูุฑ
   * ๐ ูุชูุงูู ูุน: PATCH /api/roles/applications/:id/reject
   * 
   * ูุฑูุถ ุทูุจ ูุนูู ูุน ุชุณุฌูู ุณุจุจ ุงูุฑูุถ
   */
  async rejectRoleApplication(
    applicationId: ID,
    options: RejectionOptions
  ): Promise<ApplicationActionResult> {
    try {
      const response = await apiClient.patch<ApplicationActionResult>(
        `/api/roles/applications/${applicationId}/reject`,
        options
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฑูุถ ุงูุทูุจ:', error);
      return {
        success: false,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุถ ุงูุทูุจ'
      };
    }
  }

  // ======================================
  // ๐ ุงูุฅุญุตุงุฆูุงุช ูุงูุชุญูููุงุช
  // ======================================

  /**
   * ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงุฎุชูุงุฑ ุงูุฃุฏูุงุฑ
   * ๐ ูุชูุงูู ูุน: GET /api/roles/selection-stats
   * 
   * ูุนูุฏ RoleSelectionStats ุดุงููุฉ ูุน ุฅููุงููุฉ ููุชุฑุฉ ุญุณุจ ูุชุฑุฉ ุฒูููุฉ
   */
  async getRoleSelectionStats(
    dateRange?: {
      startDate: FirebaseTimestamp;
      endDate: FirebaseTimestamp;
    }
  ): Promise<RoleStatsResult> {
    try {
      const searchParams = new URLSearchParams();
      
      if (dateRange?.startDate) {
        searchParams.append('startDate', dateRange.startDate.toDate().toISOString());
      }
      if (dateRange?.endDate) {
        searchParams.append('endDate', dateRange.endDate.toDate().toISOString());
      }

      const response = await apiClient.get<RoleStatsResult>(
        `/api/roles/selection-stats?${searchParams.toString()}`
      );

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุฃุฏูุงุฑ:', error);
      return {
        stats: {
          total_applications: 0,
          pending_applications: 0,
          approved_applications: 0,
          rejected_applications: 0,
          applications_by_role: {},
          average_approval_time_hours: 0,
          approval_rate_percentage: 0
        },
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช'
      };
    }
  }

  /**
   * ุงูุญุตูู ุนูู ุญุงูุฉ ุฏูุฑ ูุณุชุฎุฏู ูุนูู
   * ๐ ูุชูุงูู ูุน: GET /api/roles/user/:userId/status
   * 
   * ูุนูุฏ UserRoleStatus ุดุงููุฉ ุชุชุถูู User ูุชุงุฑูุฎ ุงูุทูุจุงุช ูุงูุฅุญุตุงุฆูุงุช
   */
  async getUserRoleStatus(userId: ID): Promise<{
    status: UserRoleStatus | null;
    message: string;
  }> {
    try {
      const response = await apiClient.get<{
        status: UserRoleStatus;
        message: string;
      }>(`/api/roles/user/${userId}/status`);

      return response.data;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุญุงูุฉ ุฏูุฑ ุงููุณุชุฎุฏู:', error);
      return {
        status: null,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุญุงูุฉ ุงูุฏูุฑ'
      };
    }
  }

  // ======================================
  // ๐ง ุฏูุงู ูุณุงุนุฏุฉ ูValidation
  // ======================================

  /**
   * ุงูุชุญูู ูู ุตุญุฉ ุจูุงูุงุช ุชูุฏูู ุทูุจ ุงูุฏูุฑ
   * ูุณุชุฎุฏู UserRole ูContractType ููุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
   */
  private validateRoleSubmission(submission: RoleSelectionSubmission): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    // ุงูุชุญูู ูู ุงูุฏูุฑ ุงููุฎุชุงุฑ ุจุงุณุชุฎุฏุงู allowedRoles
    if (!this.allowedRoles.includes(submission.selected_role)) {
      errors.push('ุงูุฏูุฑ ุงููุฎุชุงุฑ ุบูุฑ ูุฏุนูู');
    }

    // ุงูุชุญูู ูู ูุชุทูุจุงุช ุฏูุฑ ุงููุตูุฑ
    if (submission.selected_role === 'photographer') {
      if (!submission.additional_data?.contract_type) {
        errors.push('ููุน ุงูุนูุฏ ูุทููุจ ูููุตูุฑูู');
      } else if (!this.contractTypes.includes(submission.additional_data.contract_type)) {
        errors.push('ููุน ุงูุนูุฏ ุงููุฎุชุงุฑ ุบูุฑ ุตุญูุญ');
      }

      if (!submission.additional_data?.specializations || submission.additional_data.specializations.length === 0) {
        errors.push('ุงูุชุฎุตุตุงุช ูุทููุจุฉ ูููุตูุฑูู');
      }

      if (!submission.additional_data?.experience_years || submission.additional_data.experience_years < 0) {
        errors.push('ุณููุงุช ุงูุฎุจุฑุฉ ูุทููุจุฉ ููุฌุจ ุฃู ุชููู ุฃูุจุฑ ูู ุฃู ุชุณุงูู ุงูุตูุฑ');
      }
    }

    // ุงูุชุญูู ูู ูุชุทูุจุงุช ููุณู ุงูุจุฑุงูุฏ - ูุญุชุงุฌ Brand ID
    if (submission.selected_role === 'brand_coordinator') {
      if (!submission.additional_data?.selected_brand_id) {
        errors.push('ูุฌุจ ุงุฎุชูุงุฑ ุจุฑุงูุฏ ููุนูู ูุนู');
      }
    }

    // ุงูุชุญูู ูู ูุชุทูุจุงุช ููุณู ุงูุชุณููู
    if (submission.selected_role === 'marketing_coordinator') {
      if (!submission.additional_data?.marketing_experience) {
        errors.push('ุงูุฎุจุฑุฉ ุงูุชุณููููุฉ ูุทููุจุฉ ูููุณูู ุงูุชุณููู');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * ุงูุชุญูู ูู ุงูุณูุงุญ ุจุงูุฏูุฑ - ูุณุชุฎุฏู UserRole
   */
  isRoleAllowed(role: UserRole): boolean {
    return this.allowedRoles.includes(role);
  }

  /**
   * ุงูุญุตูู ุนูู ุฃููุงุน ุงูุนููุฏ ุงููุฏุนููุฉ - ูุนูุฏ ContractType[]
   */
  getSupportedContractTypes(): ContractType[] {
    return [...this.contractTypes];
  }

  /**
   * ุงูุญุตูู ุนูู ุงูุฃุฏูุงุฑ ุงููุฏุนููุฉ - ูุนูุฏ UserRole[]
   */
  getSupportedRoles(): UserRole[] {
    return [...this.allowedRoles];
  }

  /**
   * ุชูุณูู ุงุณู ุงูุฏูุฑ ุจุงููุบุฉ ุงูุนุฑุจูุฉ - ูุณุชุฎุฏู UserRole
   */
  formatRoleNameArabic(role: UserRole): string {
    const roleNames: Record<UserRole, string> = {
      'super_admin': 'ูุฏูุฑ ุงููุธุงู',
      'marketing_coordinator': 'ููุณู ุงูุชุณููู',
      'brand_coordinator': 'ููุณู ุงูุจุฑุงูุฏ',
      'photographer': 'ูุตูุฑ',
      'new_user': 'ูุณุชุฎุฏู ุฌุฏูุฏ'
    };

    return roleNames[role] || role;
  }

  /**
   * ุชูุณูู ุงุณู ููุน ุงูุนูุฏ ุจุงููุบุฉ ุงูุนุฑุจูุฉ - ูุณุชุฎุฏู ContractType
   */
  formatContractTypeArabic(contractType: ContractType): string {
    const contractNames: Record<ContractType, string> = {
      'freelancer': 'ุนูู ุญุฑ',
      'salary': 'ุฑุงุชุจ ุซุงุจุช'
    };

    return contractNames[contractType] || contractType;
  }

  /**
   * ุชูุณูู ุงุณู ููุน ุงูุจุฑุงูุฏ ุจุงููุบุฉ ุงูุนุฑุจูุฉ - ูุณุชุฎุฏู BrandType
   */
  formatBrandTypeArabic(brandType: BrandType): string {
    const brandTypeNames: Record<BrandType, string> = {
      'local': 'ูุญูู',
      'international': 'ุฏููู',
      'startup': 'ูุงุดุฆ',
      'enterprise': 'ูุคุณุณู'
    };

    return brandTypeNames[brandType] || brandType;
  }

  /**
   * ุชูุณูู ุงุณู ุงูุตูุงุนุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ - ูุณุชุฎุฏู Industry
   */
  formatIndustryArabic(industry: Industry): string {
    const industryNames: Record<Industry, string> = {
      'fashion': 'ุงูุฃุฒูุงุก',
      'food': 'ุงูุทุนุงู',
      'technology': 'ุงูุชูููููุฌูุง',
      'healthcare': 'ุงูุฑุนุงูุฉ ุงูุตุญูุฉ',
      'education': 'ุงูุชุนููู',
      'automotive': 'ุงูุณูุงุฑุงุช',
      'real_estate': 'ุงูุนูุงุฑุงุช',
      'travel': 'ุงูุณูุฑ',
      'beauty': 'ุงูุฌูุงู',
      'other': 'ุฃุฎุฑู'
    };

    return industryNames[industry] || industry;
  }

  /**
   * ุชูุณูู ุงุณู ุญุงูุฉ ุงูุจุฑุงูุฏ ุจุงููุบุฉ ุงูุนุฑุจูุฉ - ูุณุชุฎุฏู BrandStatus
   */
  formatBrandStatusArabic(status: BrandStatus): string {
    const statusNames: Record<BrandStatus, string> = {
      'active': 'ูุดุท',
      'paused': 'ูุชููู',
      'archived': 'ูุคุฑุดู',
      'development': 'ููุฏ ุงูุชุทููุฑ'
    };

    return statusNames[status] || status;
  }

  /**
   * ุญุณุงุจ ูุนุฏู ุงูููุงููุฉ ุนูู ุงูุทูุจุงุช
   */
  calculateApprovalRate(approved: number, total: number): number {
    return total > 0 ? Math.round((approved / total) * 100) : 0;
  }

  /**
   * ุชูุณูู ููุช ุงูููุงููุฉ ุจุงูุณุงุนุงุช - ูุณุชุฎุฏู ูุน FirebaseTimestamp
   */
  formatApprovalTimeHours(hours: number): string {
    if (hours < 1) {
      return 'ุฃูู ูู ุณุงุนุฉ';
    } else if (hours < 24) {
      return `${Math.round(hours)} ุณุงุนุฉ`;
    } else {
      const days = Math.round(hours / 24);
      return `${days} ${days === 1 ? 'ููู' : 'ุฃูุงู'}`;
    }
  }

  /**
   * ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ูููุฏุฉ ูู User ูู UserRoleStatus
   */
  extractUserDisplayInfo(user: User): {
    displayName: string;
    contactInfo: string;
    authMethods: string[];
  } {
    return {
      displayName: user.display_name || user.full_name || 'ุบูุฑ ูุญุฏุฏ',
      contactInfo: user.email || user.phone || 'ุบูุฑ ูุชููุฑ',
      authMethods: user.auth_methods?.map(method => method.type) || []
    };
  }

  /**
   * ููุชุฑุฉ ุงูุจุฑุงูุฏุงุช ุญุณุจ ูุนุงููุฑ ูุชูุฏูุฉ
   */
  filterBrands(brands: Brand[], criteria: Partial<BrandSearchOptions>): Brand[] {
    return brands.filter(brand => {
      if (criteria.brand_type && brand.brand_type !== criteria.brand_type) {
        return false;
      }
      if (criteria.industry && brand.industry !== criteria.industry) {
        return false;
      }
      if (criteria.status && brand.status !== criteria.status) {
        return false;
      }
      if (criteria.has_coordinator !== undefined) {
        const hasCoordinator = !!brand.assigned_coordinator;
        if (criteria.has_coordinator !== hasCoordinator) {
          return false;
        }
      }
      return true;
    });
  }
}

// ุฅูุดุงุก ูุณุฎุฉ ูุงุญุฏุฉ ูู ุงูุฎุฏูุฉ ููุงุณุชุฎุฏุงู ุงููุดุชุฑู
export const roleSelectionService = new RoleSelectionService();

// ุงูุชุตุฏูุฑ ุงูุงูุชุฑุงุถู
export default roleSelectionService; 