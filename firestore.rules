rules_version = '2';

// 🔒 قواعد أمان Firestore محدثة - Depth Studio (النسخة المبسطة)
// 📅 محدث: ديسمبر 19, 2024  
// 👤 المطور: علي جودت
// 🎯 متوافق 100% مع الأنواع والبنية المبسطة

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==========================================
    // 🛠️ HELPER FUNCTIONS (دوال مساعدة)
    // ==========================================
    
    // التحقق من تسجيل الدخول
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // التحقق من ملكية المستخدم
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // التحقق من صلاحية Admin (محدث للبنية الجديدة)
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primary_role == 'admin';
    }
    
    // التحقق من صلاحية Marketing Coordinator
    function isMarketingCoordinator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primary_role == 'marketing_coordinator';
    }
    
    // التحقق من صلاحية Brand Coordinator
    function isBrandCoordinator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primary_role == 'brand_coordinator';
    }
    
    // التحقق من صلاحية Photographer
    function isPhotographer() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primary_role == 'photographer';
    }
    
    // التحقق من الصلاحيات الإدارية (Admin أو Marketing Coordinator)
    function hasAdminAccess() {
      return isAdmin() || isMarketingCoordinator();
    }
    
    // التحقق من صلاحية محددة في user_permissions (محدث للبنية الجديدة)
    function hasPermission(permissionType, action) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/user_permissions/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_permissions/$(request.auth.uid)).data.permissions[permissionType][action] == true;
    }
    
    // ==========================================
    // 👥 USERS COLLECTION (المستخدمين)
    // ==========================================
    match /users/{userId} {
      // القراءة: المستخدم نفسه أو المدراء
      allow read: if isOwner(userId) || hasAdminAccess();
      
      // الإنشاء: Admin أو التسجيل الذاتي للمستخدمين الجدد
      allow create: if isAdmin() || 
                       (isOwner(userId) && request.auth.uid == userId);
      
      // التحديث: المستخدم نفسه للبيانات الأساسية، أو Admin للكل
      allow update: if (isOwner(userId) && 
                        // المستخدم العادي - لا يمكنه تحديث الدور والUID
                        (!("primary_role" in request.resource.data.diff(resource.data).changedKeys()) &&
                         !("firebase_uid" in request.resource.data.diff(resource.data).changedKeys()))) ||
                       isAdmin();
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 🔐 USER_PERMISSIONS COLLECTION (الصلاحيات)
    // ==========================================
    match /user_permissions/{userId} {
      // القراءة: المستخدم نفسه أو المدراء
      allow read: if isOwner(userId) || hasAdminAccess();
      
      // الإنشاء والتحديث والحذف: Admin فقط
      allow create, update, delete: if isAdmin();
    }
    
    // ==========================================
    // 📸 PHOTOGRAPHER_INFO COLLECTION (معلومات المصورين)
    // ==========================================
    match /photographer_info/{infoId} {
      // القراءة: المصور نفسه أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: Admin أو المصور نفسه
      allow create: if (request.resource.data.user_id == request.auth.uid && isPhotographer()) ||
                       isAdmin();
      
      // التحديث: المصور نفسه أو المدراء
      allow update: if resource.data.user_id == request.auth.uid ||
                       hasAdminAccess();
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 🏢 BRANDS COLLECTION (البراندات)
    // ==========================================
    match /brands/{brandId} {
      // القراءة: جميع المستخدمين المصرح لهم
      allow read: if isAuthenticated();
      
      // الإنشاء: Admin فقط
      allow create: if hasAdminAccess();
      
      // التحديث: Admin أو Brand Coordinator المخصص للبراند
      allow update: if hasAdminAccess() ||
                       (isBrandCoordinator() && resource.data.assigned_coordinator == request.auth.uid);
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 🎯 CAMPAIGNS COLLECTION (الحملات)
    // ==========================================
    match /campaigns/{campaignId} {
      // القراءة: جميع المستخدمين المصرح لهم
      allow read: if isAuthenticated();
      
      // الإنشاء: Admin أو Marketing Coordinator
      allow create: if hasAdminAccess();
      
      // التحديث: Admin أو المصور المكلف لتحديث الحالة فقط
      allow update: if hasAdminAccess() ||
                       (isPhotographer() && 
                        request.auth.uid in resource.data.assigned_photographers &&
                        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']));
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 📁 CONTENT COLLECTION (المحتوى)
    // ==========================================
    match /content/{contentId} {
      // القراءة: المصور المالك أو المدراء أو Brand Coordinator للبراند المحدد
      allow read: if isAuthenticated() && (
                     resource.data.photographer_id == request.auth.uid ||
                     hasAdminAccess() ||
                     (isBrandCoordinator() && 
                      exists(/databases/$(database)/documents/brands/$(resource.data.brand_id)) &&
                      get(/databases/$(database)/documents/brands/$(resource.data.brand_id)).data.assigned_coordinator == request.auth.uid)
                  );
      
      // الإنشاء: المصور المخول أو المدراء
      allow create: if isPhotographer() || hasAdminAccess();
      
      // التحديث: المصور المالك للملاحظات، أو المدراء للمراجعة والموافقة
      allow update: if (resource.data.photographer_id == request.auth.uid && 
                        request.resource.data.diff(resource.data).changedKeys().hasOnly(['tags'])) ||
                       hasAdminAccess();
      
      // الحذف: المصور المالك أو Admin
      allow delete: if resource.data.photographer_id == request.auth.uid ||
                       isAdmin();
    }
    
    // ==========================================
    // 📂 CONTENT_CATEGORIES COLLECTION (تصنيفات المحتوى)
    // ==========================================
    match /content_categories/{categoryId} {
      // القراءة: جميع المستخدمين المصرح لهم
      allow read: if isAuthenticated();
      
      // الإنشاء والتحديث والحذف: Admin فقط
      allow create, update, delete: if hasAdminAccess();
    }
    
    // ==========================================
    // 💰 PAYMENTS COLLECTION (المدفوعات)
    // ==========================================
    match /payments/{paymentId} {
      // القراءة: المستخدم المعني أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: Admin أو Marketing Coordinator
      allow create: if hasAdminAccess();
      
      // التحديث: Admin فقط (للحالة والمعالجة)
      allow update: if hasAdminAccess();
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 🎥 EQUIPMENT COLLECTION (المعدات)
    // ==========================================
    match /equipment/{equipmentId} {
      // القراءة: جميع المستخدمين المصرح لهم
      allow read: if isAuthenticated();
      
      // الإنشاء والتحديث: Admin أو Marketing Coordinator أو المالك
      allow create, update: if hasAdminAccess() ||
                               (isPhotographer() && resource.data.owner_id == request.auth.uid);
      
      // الحذف: Admin أو المالك
      allow delete: if isAdmin() ||
                       (isPhotographer() && resource.data.owner_id == request.auth.uid);
    }
    
    // ==========================================
    // 🔔 NOTIFICATIONS COLLECTION (الإشعارات)
    // ==========================================
    match /notifications/{notificationId} {
      // القراءة: المستقبل المحدد أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: النظام (Admin) أو Marketing Coordinator
      allow create: if hasAdminAccess();
      
      // التحديث: المستقبل لتحديد القراءة، أو المدراء
      allow update: if (resource.data.user_id == request.auth.uid && 
                        request.resource.data.diff(resource.data).changedKeys().hasOnly(['is_read', 'status'])) ||
                       hasAdminAccess();
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 📱 PHONE_VERIFICATIONS COLLECTION (تحقق الهواتف)
    // ==========================================
    match /phone_verifications/{verificationId} {
      // القراءة: المستخدم المالك للرقم أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: أي مستخدم مصرح له للتسجيل، أو النظام
      allow create: if isAuthenticated() || hasAdminAccess();
      
      // التحديث: المستخدم المالك لتحديث حالة التحقق، أو النظام
      allow update: if resource.data.user_id == request.auth.uid ||
                       hasAdminAccess();
      
      // الحذف: النظام فقط للتنظيف التلقائي
      allow delete: if hasAdminAccess();
    }
    
    // ==========================================
    // 🔐 AUTH_METHODS COLLECTION (طرق المصادقة)
    // ==========================================
    match /auth_methods/{methodId} {
      // القراءة: المستخدم المالك أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: المستخدم نفسه أو النظام
      allow create: if request.resource.data.user_id == request.auth.uid ||
                       hasAdminAccess();
      
      // التحديث: المستخدم المالك أو النظام لتحديث حالة التحقق
      allow update: if resource.data.user_id == request.auth.uid ||
                       hasAdminAccess();
      
      // الحذف: المستخدم المالك (لحذف طريقة مصادقة) أو Admin
      allow delete: if resource.data.user_id == request.auth.uid ||
                       isAdmin();
    }
    
    // ==========================================
    // 🎭 ROLE_APPLICATIONS COLLECTION (طلبات الأدوار)
    // ==========================================
    match /role_applications/{applicationId} {
      // القراءة: مقدم الطلب أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: المستخدم نفسه لتقديم طلب دور
      allow create: if request.resource.data.user_id == request.auth.uid;
      
      // التحديث: Admin فقط للموافقة أو الرفض
      allow update: if hasAdminAccess();
      
      // الحذف: Admin فقط
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 📜 OTP_LOGS COLLECTION (سجل رموز OTP)
    // ==========================================
    match /otp_logs/{logId} {
      // القراءة: Admin فقط للمراقبة والتحليل
      allow read: if hasAdminAccess();
      
      // الإنشاء: النظام فقط عند إرسال OTP
      allow create: if hasAdminAccess();
      
      // التحديث: النظام فقط لتحديث حالة التسليم
      allow update: if hasAdminAccess();
      
      // الحذف: Admin فقط للتنظيف
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 📊 AUTH_ACTIVITY_LOGS COLLECTION (سجل نشاط المصادقة)
    // ==========================================
    match /auth_activity_logs/{activityId} {
      // القراءة: المستخدم المالك للنشاط أو المدراء
      allow read: if resource.data.user_id == request.auth.uid ||
                     hasAdminAccess();
      
      // الإنشاء: النظام فقط لتسجيل النشاط
      allow create: if hasAdminAccess();
      
      // التحديث: النظام فقط (عادة لا يُحدث)
      allow update: if hasAdminAccess();
      
      // الحذف: Admin فقط للتنظيف
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // 🗑️ CATCH-ALL RULE (قاعدة الأمان الافتراضية)
    // ==========================================
    // رفض الوصول لأي collection غير محدد صراحة
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ==========================================
// 📝 ملاحظات النسخة المبسطة:
// ==========================================
//
// ✅ متوافق 100% مع الأنواع المبسطة
// ✅ يدعم 10 collections فقط (بدلاً من 19)
// ✅ صلاحيات مبسطة وواضحة
// ✅ أمان محكم مع مرونة للاستخدام
// ✅ admin بدلاً من super_admin
// ✅ photographer_info بدلاً من photographer_profiles
// ✅ campaigns موحدة (بدلاً من smart_campaigns + campaign_tasks)
// ✅ notifications موحدة (بدلاً من campaign_notifications)
// ✅ payments و equipment مضافة
//
// 🔄 آخر تحديث: ديسمبر 19, 2024
// 👨‍�� المطور: علي جودت 