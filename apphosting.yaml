# Firebase App Hosting Configuration
# Depth Studio Frontend Deployment Settings
#
# ðŸ”¥ FINAL & DEFINITIVE FIX v5.0 ðŸ”¥
# SOLUTION: Firebase ignores custom buildCommand when it detects Next.js
# We will TRICK Firebase by hiding Next.js detection and force custom build

# Build settings
runConfig:
  runtime: nodejs18
  minInstances: 0
  maxInstances: 100
  concurrency: 1000
  
env:
  # Firebase Configuration - Ø§Ø³ØªØ®Ø¯Ø§Ù… Ø§Ù„Ù‚ÙŠÙ… Ø§Ù„Ù…Ø¨Ø§Ø´Ø±Ø©
  - variable: NEXT_PUBLIC_FIREBASE_API_KEY
    value: AIzaSyDHg1-mxejIMPycZJQeE0sZJmWxsimaMFI
  - variable: NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN
    value: depth-studio.firebaseapp.com
  - variable: NEXT_PUBLIC_FIREBASE_DATABASE_URL
    value: https://depth-studio-default-rtdb.firebaseio.com
  - variable: NEXT_PUBLIC_FIREBASE_PROJECT_ID
    value: depth-studio
  - variable: NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET
    value: depth-studio.firebasestorage.app
  - variable: NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID
    value: "584154257700"
  - variable: NEXT_PUBLIC_FIREBASE_APP_ID
    value: 1:584154257700:web:b570a34dc3854662c3fbb1
  - variable: NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID
    value: G-RY2WLQCK1T
  
  # Google OAuth
  - variable: NEXT_PUBLIC_GOOGLE_CLIENT_ID
    value: 584154257700-d6vp6d876am0c0loapthj64o4riii616.apps.googleusercontent.com
    
  # FCM Notification
  - variable: NEXT_PUBLIC_FCM_VAPID_KEY
    value: BOvPwykYYlnNPddjFxvBVb5sv5VEYGgzMNkbuupSYRVUubcZVHy_--Rm479cbqyTo5vkYxgv9R3rENhknUfJWDg
  
  # Application Configuration - Ù„Ù„Ø¥Ù†ØªØ§Ø¬
  - variable: NEXT_PUBLIC_API_URL
    value: https://us-central1-depth-studio.cloudfunctions.net/api
  - variable: NEXT_PUBLIC_BACKEND_URL
    value: https://us-central1-depth-studio.cloudfunctions.net/api
  - variable: NEXT_PUBLIC_FUNCTIONS_URL
    value: https://us-central1-depth-studio.cloudfunctions.net/api
  - variable: NEXT_PUBLIC_APP_ENV
    value: production
  - variable: NEXT_PUBLIC_ENABLE_LOGGING
    value: "true"
  - variable: NEXT_PUBLIC_FIRESTORE_DATABASE_ID
    value: depth-production
  - variable: NEXT_PUBLIC_USE_EMULATOR
    value: "false"
  - variable: NEXT_PUBLIC_ENABLE_APP_CHECK
    value: "true"
  - variable: NEXT_PUBLIC_APP_CHECK_DEBUG_TOKEN
    value: "false"

buildConfig:
  # ðŸŽ¯ ULTIMATE TRICK: Hide Next.js from Firebase detection, then force our build
  buildCommand: |
    set -e
    echo "ðŸ”¥ STEALTH BUILD v5.0 - Tricking Firebase and building manually..."
    
    # STEALTH STEP: Temporarily hide Next.js detection by renaming next.config.js
    if [ -f "frontend/next.config.js" ]; then
      mv frontend/next.config.js frontend/next.config.js.hidden
    fi
    
    # Step 1: Install all dependencies normally
    npm install
    
    # STEALTH STEP: Restore next.config.js for the build
    if [ -f "frontend/next.config.js.hidden" ]; then
      mv frontend/next.config.js.hidden frontend/next.config.js
    fi
    
    # Step 2: Build frontend manually (creates frontend/.next/standalone/frontend/.next/server/)
    echo "Building frontend application..."
    cd frontend && npm run build && cd ..
    
    # Step 3: Create the Firebase-expected structure
    echo "Creating Firebase-compatible structure..."
    mkdir -p .next/standalone/.next/server
    
    # Step 4: Copy everything from frontend standalone to root
    cp -r frontend/.next/standalone/* .next/standalone/
    
    # Step 5: Fix the nested server path that Firebase buildpack expects
    if [ -d ".next/standalone/frontend/.next/server" ]; then
      echo "Fixing nested server paths..."
      cp -r .next/standalone/frontend/.next/server/* .next/standalone/.next/server/
    fi
    
    # Step 5-B: ðŸ”¥ PATCH V7 - Move middleware-manifest.json to where Firebase expects it
    if [ -f ".next/standalone/.next/middleware-manifest.json" ] && \
       [ ! -f ".next/standalone/.next/server/middleware-manifest.json" ]; then
      echo "Moving middleware-manifest.json into server/ directory..."
      mv .next/standalone/.next/middleware-manifest.json \
         .next/standalone/.next/server/middleware-manifest.json
    fi
    
    # Create empty manifest if doesn't exist at all (fallback safety)
    if [ ! -f ".next/standalone/.next/server/middleware-manifest.json" ]; then
      echo "Creating fallback middleware-manifest.json..."
      echo "{}" > .next/standalone/.next/server/middleware-manifest.json
    fi
    
    # Step 6: Move the main server.js to the root where Firebase expects it
    if [ -f ".next/standalone/frontend/server.js" ]; then
      echo "Moving main server.js to root..."
      cp .next/standalone/frontend/server.js .next/standalone/server.js
    fi
    
    # Step 7: Clean up the nested frontend directory
    rm -rf .next/standalone/frontend
    
    # Step 8: Final verification
    echo "âœ… Verifying Firebase expects these files..."
    ls -la .next/standalone/.next/server/middleware-manifest.json
    echo "âœ… server.js location:"
    ls -la .next/standalone/server.js
    echo "âœ… package.json location:"
    ls -la .next/standalone/package.json
    
    echo "ðŸŽ¯ SUCCESS: Complete Firebase-compatible structure created!"
  
  # Firebase will find everything exactly where the buildpack expects
  outputDirectory: .next/standalone 