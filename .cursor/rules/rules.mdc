---
description: 
globs: 
alwaysApply: true
---
📜 قواعد ومبادئ توجيهية للوكيل الذكي (Sonnet 4) - مشروع Depth Studio
الهدف العام: ضمان تطوير دقيق، منظم، وآمن لمشروع "Depth Studio"، مع التركيز على فهم المتطلبات بشكل كامل، اتباع أفضل الممارسات، وتقليل الأخطاء والنسيان.
[RESPONSIVE_DESIGN_GUIDELINES.md](mdc:depth-studio-frontend/RESPONSIVE_DESIGN_GUIDELINES.md)
[git_repository_documentation.md](mdc:git_repository_documentation.md)
🧠 1. الفهم والتحليل العميق (قبل البدء)

قاعدة 1.1: قراءة وفهم جميع المستندات المرجعية بالكامل.

التفصيل: قبل كتابة أي كود أو خطة، يجب عليك قراءة واستيعاب محتوى جميع الملفات المرجعية المقدمة (مثل depth_studio_ui_requirements.md, firebase_project_documentation.md, depth_studio_database_api_specification.md، إلخ).

الهدف: تكوين صورة شاملة ومتكاملة عن المشروع، متطلباته، بنيته التحتية، وأهدافه.

قاعدة 1.2: تحديد وترتيب الأولويات (الأهم فالمهم).

التفصيل: بناءً على التحليل، حدد المهام ذات الأولوية القصوى (مثل تحديث قواعد الأمان) والمهام الأساسية التي تعتمد عليها ميزات أخرى.

الهدف: ضمان بناء النظام بشكل تدريجي ومنطقي.

قاعدة 1.3: طرح الأسئلة التوضيحية عند الغموض.

التفصيل: إذا كان هناك أي غموض أو نقص في المعلومات في المتطلبات، يجب عليك طلب توضيحات من "علي جودت" قبل المتابعة.

الهدف: تجنب الافتراضات الخاطئة التي قد تؤدي إلى أخطاء في التنفيذ.

قاعدة 1.4: تحليل التبعيات بين المهام.

التفصيل: فهم كيف تعتمد المهام المختلفة على بعضها البعض. على سبيل المثال، لا يمكن بناء واجهة إدارة المستخدمين قبل تهيئة مجموعة users في Firestore ووضع قواعد الأمان المناسبة.

الهدف: ضمان تسلسل منطقي للتنفيذ.

🔥 2. التركيز على Firebase والأمان (الأولوية القصوى)

قاعدة 2.1: قواعد الأمان (Security Rules) أولاً ودائماً.

التفصيل: يجب أن تكون صياغة وتحديث قواعد الأمان لـ Firestore هي المهمة الأولى ذات الأولوية القصوى. يجب أن تكون هذه القواعد صارمة، مفصلة، وتعكس نظام الصلاحيات الديناميكي.

الهدف: حماية بيانات المشروع من الوصول غير المصرح به منذ اللحظة الأولى. لا تبدأ أي تطوير للواجهات الخلفية أو الأمامية التي تتفاعل مع Firestore قبل وجود قواعد أمان أساسية قوية.

قاعدة 2.2: التحقق من تاريخ انتهاء صلاحية قواعد الأمان.

التفصيل: تأكد بشكل قاطع من أن أي قواعد أمان جديدة يتم تطبيقها ستكون فعالة بعد تاريخ انتهاء الصلاحية الحالي (28 يونيو 2025).

الهدف: تجنب توقف النظام بسبب انتهاء صلاحية القواعد.

قاعدة 2.3: فهم دقيق لهياكل مجموعات Firestore.

التفصيل: عند تهيئة المجموعات أو التفاعل معها، ارجع دائماً إلى depth_studio_database_api_specification.md للتأكد من تطابق الحقول وأنواع البيانات والفهارس المقترحة.

الهدف: بناء قاعدة بيانات متناسقة وقابلة للاستعلام بكفاءة.

قاعدة 2.4: الاستخدام الأمثل لميزات Firebase.

التفصيل: استفد من ميزات Firebase Authentication (بما في ذلك SMS MFA)، Firestore (الاستعلامات، الفهارس، المعاملات عند الحاجة)، Cloud Functions (للعمليات الخلفية المعقدة والـ AI لاحقاً)، و Hosting.

الهدف: بناء نظام قوي وآمن وقابل للتطوير.

💻 3. كتابة الكود والتطوير (الدقة والجودة)

قاعدة 3.1: الالتزام بالتقنيات المحددة لكل جزء من النظام.

التفصيل: إذا تم تحديد Vue.js للوحة التحكم الإدارية و Flutter لتطبيقات الموبايل، التزم بهذا التوزيع.

الهدف: الاستفادة من نقاط القوة لكل تقنية وتجنب التعقيد غير الضروري.

قاعدة 3.2: اتباع هيكلية المشروع المقترحة.

التفصيل: عند بناء الواجهات الأمامية (مثل Vue.js)، التزم بهيكل الملفات والمجلدات (components, views, layouts) كما هو موضح في depth_studio_ui_tree_structure.md.

الهدف: تنظيم الكود وتسهيل صيانته وتطويره.

قاعدة 3.3: بناء المكونات المشتركة أولاً.

التفصيل: ابدأ ببناء المكونات الأساسية القابلة لإعادة الاستخدام (مثل Header, Sidebar, نماذج الإدخال الأساسية) قبل بناء الواجهات الكاملة.

الهدف: توفير الوقت والجهد وضمان التناسق.

قاعدة 3.4: كتابة كود نظيف ومقروء وموثق.

التفصيل: استخدم أسماء واضحة للمتغيرات والدوال. قسم الكود المعقد إلى دوال أصغر. أضف تعليقات لشرح الأجزاء غير البديهية أو المنطق المعقد.

الهدف: تسهيل فهم الكود ومراجعته وصيانته في المستقبل.

قاعدة 3.5: التعامل مع الأخطاء بشكل استباقي.

التفصيل: استخدم try-catch لمعالجة الأخطاء المحتملة، خاصة عند التفاعل مع APIs أو Firestore. قدم رسائل خطأ واضحة للمستخدم.

الهدف: بناء نظام مرن وقادر على التعامل مع المشاكل غير المتوقعة.

قاعدة 3.6: اختبار الوحدات والمكونات (حيثما أمكن).

التفصيل: إذا كانت البيئة تسمح، قم بإنشاء اختبارات أساسية للوظائف والمكونات الهامة.

الهدف: اكتشاف الأخطاء مبكراً وتقليل المشاكل في المراحل المتقدمة.

قاعدة 3.7: التحقق من صحة مدخلات المستخدم.

التفصيل: قبل إرسال أي بيانات إلى Firestore أو الـ Backend، تحقق من صحتها وتوافقها مع المتطلبات.

الهدف: الحفاظ على سلامة البيانات ومنع الأخطاء.

قاعدة 3.8: الحذر عند التعامل مع عمليات الكتابة والحذف.

التفصيل: كن حذراً جداً عند تنفيذ عمليات تعديل أو حذف البيانات في Firestore. تأكد من أن الشروط صحيحة وأن العملية مستهدفة بشكل دقيق.

الهدف: تجنب فقدان البيانات أو تلفها.

📋 4. إدارة المهام والتواصل (التنظيم والشفافية)

قاعدة 4.1: الالتزام بخطة العمل في todo1.md.

التفصيل: اتبع التسلسل والأولويات المحددة في ملف todo1.md الذي ستقوم بإنشائه.

الهدف: ضمان التقدم المنظم نحو تحقيق الأهداف.

قاعدة 4.2: تقسيم المهام الكبيرة إلى مهام فرعية أصغر.

التفصيل: عند تحديد المهام في todo1.md، اجعلها صغيرة وقابلة للإدارة والقياس.

الهدف: تسهيل تتبع التقدم وتحديد المشاكل بسرعة.

قاعدة 4.3: توثيق التقدم والقرارات.

التفصيل: أثناء العمل، قم بتحديث todo1.md أو سجل ملاحظات حول القرارات التصميمية التي تتخذها، التحديات التي تواجهها، والحلول التي تطبقها.

الهدف: الحفاظ على سجل واضح لعملية التطوير.

قاعدة 4.4: طلب المراجعة البشرية عند النقاط الحرجة.

التفصيل: كما هو محدد في الأمر السابق، حدد نقاط مراجعة واضحة (مثل بعد الانتهاء من قواعد الأمان، أو بعد بناء وحدة مصادقة كاملة) واطلب من "علي جودت" مراجعتها قبل المتابعة.

الهدف: ضمان التوافق المستمر وتصحيح المسار مبكراً إذا لزم الأمر.

قاعدة 4.5: الإبلاغ الفوري عن أي مشاكل أو عوائق.

التفصيل: إذا واجهتك مشكلة لا يمكنك حلها أو عائق يمنعك من التقدم، أبلغ "علي جودت" فوراً.

الهدف: تجنب التأخير غير الضروري وإيجاد حلول سريعة.

🔄 5. المراجعة والتحقق (ضمان الجودة)

قاعدة 5.1: مراجعة ذاتية للكود قبل اعتماده.

التفصيل: قبل اعتبار مهمة ما مكتملة، قم بمراجعة الكود الذي كتبته للتأكد من خلوه من الأخطاء الواضحة وتوافقه مع المتطلبات.

الهدف: تقليل الأخطاء التي قد تنتقل للمراحل التالية.

قاعدة 5.2: التحقق من التطابق مع المتطلبات.

التفصيل: عند إكمال كل مهمة أو ميزة، ارجع إلى المستندات المرجعية (خاصة depth_studio_ui_requirements.md و depth_studio_database_api_specification.md) للتأكد من أن ما تم تنفيذه يطابق المتطلبات بدقة.

الهدف: ضمان أن المنتج النهائي يلبي الاحتياجات المحددة.

قاعدة 5.3: اختبار الوظائف الأساسية يدوياً.

التفصيل: بعد بناء أي جزء وظيفي (مثل نظام تسجيل الدخول، أو عرض قائمة البراندات)، قم باختباره يدوياً للتأكد من أنه يعمل كما هو متوقع.

الهدف: اكتشاف الأخطاء الوظيفية بشكل مباشر.

تذكير دائم: هدفك هو بناء نظام "Depth Studio" بشكل احترافي، دقيق، وآمن. اتباع هذه القواعد سيساعدك على تحقيق ذلك.

