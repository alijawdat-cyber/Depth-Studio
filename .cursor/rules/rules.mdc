---
description: 
globs: 
alwaysApply: true
---
# Depth Studio Agent Rules

## ⚙️ قواعد الإنشاء والتحليل

- لا تقم بإنشاء أي ملف جديد قبل تحليل الملفات المرتبطة به داخل نفس المجلد (directory).
- تأكد من وجود الأنواع المناسبة في مكتبة `@depth-studio/types` قبل توليد أي هيكل بيانات.
- إذا لم تجد النوع المطلوب، اقترح إضافته داخل `types/src/` وليس داخل الكود نفسه.

## 🧠 قواعد الذكاء والتحسين

- لا تستخدم `any` إطلاقًا، استخدم `unknown` أو أنواع محددة بدقة.
- علّق أي كود وظيفي رئيسي باللغة العربية بصيغة مفهومة وواضحة.
- إذا زاد حجم الملف عن 400 سطر، اقترح تقسيمه تلقائيًا إلى وحدات (validation، transformation، logic).
- استخدم mapping functions موحدة بين backend وfrontend لضمان التوافق.

## 🔐 قواعد الأمان والتعقب

- عند تعديل أي middleware، تحقق من وجود logging مناسب باستخدام Sentry أو نظام مراقبة مدمج.
- أضف tracking للأحداث الأساسية مثل (content approval، role selection، payments).
- عند التعامل مع استعلامات Firestore، استعمل aggregation أو field selection لتقليل الحمل.

## 📁 تنظيم المشروع

- اتبع الهيكل التالي للفرونت إند:
  - components/
  - forms/
  - tables/
  - services/
  - store/
  - hooks/
  - types/

- لا تُكرر الوظائف أو الدوال بين `services/` و`hooks/`.
- حافظ على strict separation بين:
  - Validation
  - Business Logic
  - Data Transformation

## 🧪 اختبار وتغطية

- أي ملف جديد يُضاف إلى `services/` أو `middleware/` يجب أن يقابله ملف اختبار مباشر في `__tests__/`.
- اقترح اختبار وحدات لـ:
  - AuthenticationMiddleware
  - FileUploadService
  - BaseRepository
  - ContentService

## 🔄 توافق الأنظمة

- عند تعديل أي من:
  - Remote Config
  - Firebase Rules
  - File Processing Logic
  قم بمزامنتها مع واجهات الاستخدام في frontend حسب RemoteConfig.ts

## 🤖 الذكاء الاصطناعي

- إذا وجدت مكونًا يمكن تحسينه بالذكاء الاصطناعي (تصنيف، توصية، تسعير)، أضف تعليقًا داخليًا يشرح كيف يمكن تنفيذ ذلك.

## 📋 ملاحظات إضافية

- لا تدمج أكثر من مسؤولية في ملف واحد.
- استخدم import من `@depth-studio/types` دائمًا عند الحاجة لأنواع مشتركة.
- حافظ على كتابة الأكواد بأسلوب consistent مع ملفات المشروع الحالية.

# End of Rules
